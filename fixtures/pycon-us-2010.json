[
  {
    "pk": 235,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        80
      ],
      "title": "Introduction to Traits",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-05-17T07:26:32Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Introduction to Traits</p>\n<p>Presented by Corran Webster</p>\n<p>\nThe Traits project allows you to simply add validation, initialization, delegation, notification and a graphical user interface to Python object attributes. In this tutorial we will explore the Traits toolset and learn how to dramatically reduce the amount of boilerplate code you write, do rapid GUI application development, and understand the ideas which underly other parts of the Enthought Tool Suite (such as MayaVi and Chaco plotting toolkits).\n</p>\n<p>\nTraits and the Enthought Tool Suite are open source projects licensed under a BSD-style license.\n</p>\n<p>\nIntended Audience\n</p>\nIntermediate to advanced Python programmers\n\n<p>\nClass Outline\n</p>\n<ul>\n<li>Introduction to ETS and Traits\n</li><li>Basic Traits + Trait types + Property Traits + Trait Validation\n</li><li>Traits UI + Basic Traits UI + Tour of the Trait editors + Advanced Trait editors\n</li><li>Notification in Traits + Static notification + Dynamic notification\n</li><li>Advanced Traits UI + Customizing Views, Groups and Items + Traits UI Handlers + Buttons, Menus and Toolbars + Drag and Drop\n</li><li>Q&A;\n</li></ul>\n<p>\nRequirements\n</p>\n<p>\nLaptop recommended (any major OS is fine), with the following software installed:\n</p>\n<ul>\n<li>Python 2.5 or 2.6 (www.python.org)\n</li><li>Either wxPython (http://www.wxpython.org/) or PyQt (http://www.riverbankcomputing.co.uk/software/pyqt/intro)\n</li><li>Numpy and Scipy (http://www.scipy.org)\n</li><li>Enthought Tool Suite 3.2 or higher (http://code.enthought.com/projects)\n</li></ul>\n<p>\nAll required software can be obtained by installing the free trial version of the Enthought Python Distribution v5 or later (http://www.enthought.com/products/epd.php).\n</p>",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        323,
        234
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3633134",
      "video_webm_url": null,
      "video_ogv_length": null,
      "slug": "pycon-2010--introduction-to-traits",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-IntroductionToTraits562.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-IntroductionToTraits425-362.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigd72JAI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 236,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        78
      ],
      "title": "Django Deployment Workshop",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-05-17T02:34:04Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Django Deployment Workshop</p>\n<p>Presented by Jacob Kaplan-Moss</p>\n<p>So you've written a Django site... now what? Writing the application is just\nthe beginning; now you've got to put it into production! In this hands-on\nworkshop we'll walk through the creation of a full Django deployment\nenvironment running on a cluster of (virtual) machines.</p>\n<p>This class will introduce students to a wide variety of technologies,\nincluding Amazon's EC2 and S3, Fabric, Varnish, nginx, mod_wsgi, memcached,\nPostgreSQL, pgpool, pg_standby, and more.</p>\n<p>By the end of the class, each student will have created an environment\nfeaturing:</p>\n<ul>\n<li>Multiple levels of caching and load balancing.</li>\n<li>Multiple web application servers.</li>\n<li>Shared media servers.</li>\n<li>Redundant replicated database servers.</li>\n<li>Separate caching servers.</li>\n</ul>\n<p>We'll create this whole stack on Amazon EC2 virtual machines, so students will\nbe able to take home a complete copy of all the deployment configuration for\nfuture review at their leisure.</p>\n<p>Note: the example application used in this class with be a Django site, and\nthe class assumes at least a moderate comfort level with Django. However, the\ntools and techniques apply just as well to other Python web frameworks, so\nusers of other tools will likely be able to follow along fairly easily.</p>\n\n<h1>Intended Audience</h1>\n<p>Intermediate to advanced Django users with sites nearing or\nin production. Python developers using other web frameworks will likely be\nable to follow along -- see the note in the summary, above.</p>\n\n\n<h1>Class Outline</h1>\n<ul>\n<li>Introduction: the deployment question</li>\n<li>Application server: mod_wsgi</li>\n<li>Database server: PostgreSQL</li>\n<li>Automated deployment with Fabric</li>\n<li>Multiple web servers; load balancing with nginx</li>\n<li>Adding memcached</li>\n<li>Database connection middleware: pgpool</li>\n<li>Database redundancy: warm standby</li>\n<li>Upstream caching: Varnish</li>\n<li>Final load testing: how'd we do?</li>\n</ul>\n\n\n<h1>Requirements</h1>\n<p>Students will need a computer and Amazon EC2 and S3 accounts,\nand will be asked to familiarize themselves with the process of starting and\nstopping EC2 virtual machines before the class.</p>\n<a href=\"http://us.pycon.org/2010/tutorials/kaplanmoss_django\">http://us.pycon.org/2010/tutorials/kaplanmoss_django/</a>",
      "video_mp4_url": null,
      "tags": [
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3632436",
      "video_webm_url": null,
      "video_ogv_length": null,
      "slug": "pycon-2010--django-deployment-workshop",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-DjangoDeploymentWorkshop286.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-DjangoDeploymentWorkshop734-407.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigd7wawI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 237,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        96
      ],
      "title": "Introduction to unittest (a.k.a. PyUnit) (#96)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T19:39:00Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Introduction to Unittest (a.k.a. PyUnit)</p>\n<p>Presented by Chander K Ganesan</p>\n<p>\nThe PyUnit (unittest) unit testing framework provides an easy-to-use set of tools and techniques to add robust unit testing to your Python code. By integrating unit testing in their code, developers allow for a robust set of tools to quickly and easily identify \"broken\" code.\n</p>\n<p>\nIn this session we'll explore the unittest module and demonstrate how to leverage PyUnit for unit testing.\n</p>",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        324,
        21,
        325
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359645",
      "video_webm_url": null,
      "video_ogv_length": 256757557,
      "slug": "pycon-2010--introduction-to-unittest--a-k-a--pyun",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010IntroductionToUnittestAkaPyUnit96996.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010IntroductionToUnittestAkaPyUnit96996-668.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHOnywC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 238,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        82
      ],
      "title": "Modern version control: Mercurial internals (#113)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T19:38:18Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Modern version control: Mercurial internals</p>\n<p>Presented by Dirkjan Ochtman</p>\n<p>\nIn this talk, I'd like to talk a bit about Mercurial. This will not be a beginner-level talk on DVCS or hg; it aims to be a higher-level discussion of the concepts employed in Mercurial. After having discussed these, I'd also like to compare Mercurial and git based on UI, performance and underlying concepts.\n</p>",
      "video_mp4_url": null,
      "tags": [
        326,
        327,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359642",
      "video_webm_url": null,
      "video_ogv_length": 156598086,
      "slug": "pycon-2010--modern-version-control--mercurial-int",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-939.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010ModernVersionControlMercurialInternals113726-31.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHOnykC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 239,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        83
      ],
      "title": "Hg and Git : Can't we all just get along? (#154)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T19:37:56Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Hg and Git: Can't we all just get along?</p>\n<p>Presented by Scott Chacon</p>\n<p>\nThere is a fair amount of unnecessary animosity between developers about version control systems, especially between Mercurial and Git users. In reality, these two systems are very similar and can actually cooperate pretty well. In this talk we will show just how similar Git and Mercurial are, look at some of their technical differences, and see how they can work together by looking at hg-git, the bidirectional Git/Mercurial bridge, implemented in Python.\n</p>",
      "video_mp4_url": null,
      "tags": [
        328,
        326,
        327,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359640",
      "video_webm_url": null,
      "video_ogv_length": 161865609,
      "slug": "pycon-2010--hg-and-git---can--39-t-we-all-just-ge",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-951.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010HgAndGitCantWeAllJustGetAlong154454-979.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHOnycC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 240,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        84
      ],
      "title": "Remixing Music Pythonically (#157)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T19:37:25Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Remixing Music Pythonically</p>\n<p>Presented by Adam T. Lindsay</p>\n<p>\nThe Echo Nest Remix API (<a href=\"http://code.google.com/p/echo-nest-remix/\">http://code.google.com/p/echo-nest-remix/</a>) was made open source by The Echo Nest, a \"music intelligence\" company based in the Boston area in the autumn of 2008. This talk will offer details on the concise expressivity offered when editing multimedia driven by content-based features, and some insights on what Pythonic magic did and didn't work in the development of the modules. Audio and video examples of the fun-yet-odd outputs that are possible will be shown.\n</p>",
      "video_mp4_url": null,
      "tags": [
        329,
        330,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359637",
      "video_webm_url": null,
      "video_ogv_length": 138997346,
      "slug": "pycon-2010--remixing-music-pythonically---157",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010RemixingMusicPythonically157433.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010RemixingMusicPythonically157433-961.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHOnyQC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 241,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        85
      ],
      "title": "Teaching compilers with python (#87)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T19:36:44Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Teaching compilers with python</p>\n<p>Presented by Dr. Matthieu Amiguet</p>\n<p>\nWhy choose Python to teach compilers?\n</p>\n<p> \nIn the University of Applied Sciences ARC, compilers are taught in a relatively short amount of time. Focus is put on the main conceptual ideas, letting aside many technical details. Still, the students are expected to write a full compiler within a few weeks' time.\n</p>\n<p>\nAfter trying the traditional C/Lex/Yacc based approach, and a more education-oriented Java/Jaccie solution, we settled on Python and PLY, plus a few enhancements (syntax tree graphical representation, decorator to achieve better code separation).\n</p>\n<p>\nAs a result, the students get a better understanding of the compiler concepts and produce more interesting and creative projects. \n</p>",
      "video_mp4_url": null,
      "tags": [
        331,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359636",
      "video_webm_url": null,
      "video_ogv_length": 134437404,
      "slug": "pycon-2010--teaching-compilers-with-python---87",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-468.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010TeachingCompilersWithPython87495-873.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHOnyMC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 242,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        86
      ],
      "title": "Dealing with unsightly data in the real world. (#156)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T19:36:31Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Dealing with unsightly data in the real world</p>\n<p>Presented by Alexander Dutton</p>\n<p>\nDrawing on experiences writing <a href=\"http://m.ox.ac.uk/\">http://m.ox.ac.uk/</a>, we'll explore the art of getting data out of unhelpful systems. We'll start with working out how to interact with a system, move on to techniques for parsing the data it gives you, and round off by implementing a shinier interface over the top.\n</p>",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        129,
        92
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359635",
      "video_webm_url": null,
      "video_ogv_length": 119178389,
      "slug": "pycon-2010--dealing-with-unsightly-data-in-the-re",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-492.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010DealingWithUnsightlyDataInTheRealWorld156210-8.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHOnyIC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 243,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        87
      ],
      "title": "Rapid multi-purpose testing (#81)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T19:36:13Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Rapid multi-purpose testing</p>\n<p>Presented by Holger Krekel</p>\n<p>\nWant to rapidly test code, javascript or documents on different Python Interpreters and versions? This talk gives an overview on new py.test features of the last year. I'll discuss the minimal-boilerplate testing and new plugin model and give an overview on which testing needs are covered so far, for example:\n</p>\n<ul>\n<li>run tests written for nose or unittest\n</li><li>ad-hoc distribute tests to local or remote Python environments\n</li><li>test compatibility with Python3\n</li><li>run javascript unit-tests in real browsers\n</li><li>coverage testing\n</li><li>django-specific testing\n</li></ul>\n<p> \nI'll conclude with upcoming features regarding testing-in-the-cloud and plans on more test tool convergence. (URL: <a href=\"http://pytest.org/\">http://pytest.org</a>) \n</p>\n<p>\n[VIDEO HAS ISSUES: first 47 seconds or so are really quiet]\n</p>",
      "video_mp4_url": null,
      "tags": [
        264,
        231,
        322,
        21
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359632",
      "video_webm_url": null,
      "video_ogv_length": 154840884,
      "slug": "pycon-2010--rapid-multi-purpose-testing---81",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-505.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010rapidMultipurposeTesting81761-297.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHOnx8C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 244,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        88
      ],
      "title": "Eventlet: Asynchronous I/O with a synchronous interface (#141)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T19:35:23Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Eventlet: Asynchronous I/O with a synchronous interface</p>\n<p>Presented by Donovan Preston</p>\n<p>\nNetwork servers which scale to thousands of simultaneous connections have always been possible in Python thanks to libraries such as asyncore and twisted. More recently, FriendFeed's new open source project Tornado has stirred debate in this area. These libraries allow a Python process to scale to many simultaneous connections using non-blocking I/O (also known as asynchronous I/O). However these projects require that the programmer learn a custom API to abstract away the complexities of using a callback-style API.\n</p>\n<p>\nEventlet uses greenlet, which provides coroutines as described in \"The Art of Computer Programming\", to implement efficient cooperative concurrency while retaining synchronous semantics. Eventlet also provides an implementation of the standard library's socket module. Code written to use Python's standard socket library can be transparently converted to use nonblocking I/O and green threads with eventlet. This leads to much greater code reuse and programmer efficiency.\n</p>\n<p>\n<a href=\"http://www.eventlet.net/\">http://www.eventlet.net/</a>\n</p>\n",
      "video_mp4_url": null,
      "tags": [
        289,
        332,
        333,
        334,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359630",
      "video_webm_url": null,
      "video_ogv_length": 157178869,
      "slug": "pycon-2010--eventlet--asynchronous-i-o-with-a-syn",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-967.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010EventletAsynchronousIOWithASynchronousInterface667-479.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHOnx0C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 245,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        23
      ],
      "title": "Customizing your editor for maximum productivity (#171)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T19:35:02Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Customizing your editor for maximum productivity</p>\n<p>Presented by Justin Lilly</p>\n<p>\nThis will be an overview of the sorts of things that editors can offer to make your programming life easier. It will also include specifics of how to get these features working in a basic editor. (Vim or Emacs, yet undecided)\n</p>",
      "video_mp4_url": null,
      "tags": [
        335,
        231,
        322,
        336
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359629",
      "video_webm_url": null,
      "video_ogv_length": 156836858,
      "slug": "pycon-2010--customizing-your-editor-for-maximum-p",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-802.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010CustomizingYourEditorForMaximumProductivity171712-991.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHOnxwC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 246,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        89
      ],
      "title": "PyCon 2010:Advanced SQL Alchemy",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T19:34:31Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Advanced SQLAlchemy</p>\n<p>Presented by Michael Bayer</p>\n<p>\nSQLAlchemy is the premier SQL toolkit for Python. SQLAlchemy exposes the full power of SQL while remaining easy to use for the basics, and is flexible enough to work with existing database schemas as well as fresh designs. SQLAlchemy is used in production by leading Python web frameworks Pylons and TurboGears as well as many other web and non-web developers.\n</p>\n<p>\nThis tutorial discusses current data mapping techniques, advanced Query techniques, Session/transaction usage, and maximizing schema usage with SQLAlchemy's event model.\n</p>\n<p>\nIntended Audience\n</p>\n<p>\nPython experience: intermediate. You should already have some hands-on experience with Python and be comfortable reading modern Python code.\n</p>\n<p>\nSQL experience: intermediate. We will use subselects and outer joins as part of the SQL layer.\n</p>\n<p>\nORM experience: prior experience with SQLAlchemy is recommended.\n</p>\n<p>\nClass Outline\n</p>\n<p>\nDeclarative Mapping\n</p>\n<ul>\n<li>Initial configuration\n</li><li>Basic mapping\n</li><li>Building a many-to-many relation\n</li><li>Using late-evaluated configuration arguments\n</li></ul>\n<p>\nAdvanced queries\n</p>\n<ul>\n<li>Selecting objects, selecting columns\n</li><li>Thinking generatively\n</li><li>Joining like a Pro\n</li><li>Power Eager Loading\n</li><li>Selecting from Anything\n</li></ul>\n<p>\nSession Techniques\n</p>\n<ul>\n<li>Transaction lifecycle\n</li><li>Scoping objects in and out of caches using merge()\n</li></ul>\n<p>\nInheritance Mapping\n</p>\n<ul>\n<li>Single Table Inheritance\n</li><li>Joined Table Inheritance\n</li><li>High Level/Low Level Joined Queries\n</li></ul>\n<p>\nExtending SQL\n</p>\n<ul>\n<li>Creating new SQL constructs\n</li><li>Creating new DDL constructs\n</li></ul>\n<p>\nExtending the ORM\n</p>\n<ul>\n<li>Using SessionExtension to populate denormalized views\n</li><li>Subclassing Query to Suit Your Needs\n</li></ul>",
      "video_mp4_url": null,
      "tags": [
        337,
        231,
        322,
        253,
        234
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359624",
      "video_webm_url": null,
      "video_ogv_length": 926558095,
      "slug": "pycon-2010-advanced-sql-alchemy",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010AdvancedSQLAlchemy724.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010AdvancedSQLAlchemy724-474.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigc6fFwI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 247,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        90
      ],
      "title": "The Meaty Parts of Python: Closures, Decorators, List Comprehension, and Functional Constructs",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T19:17:15Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>The Meaty Parts of Python: Closures, Decorators, List Comprehension, and Functional Constructs</p>\n<p>Presented by Matt Harrison</p>\n<p>\nAre you new to Python and want to learn how to step it up to the next level? Have you wondered about functional programming, closures, decorators, generators or list comprehensions and when you should use them? This hands-on tutorial will cover these intermediate subjects in detail, by explaining the theory behind them then walking through examples. It will also cover how to test such programs. The session will conclude with some basic problems to work through.\n</p>\n<p>\nOutline:\n</p>\n<ul>\n<li>Testing (45 min)\n<ul>\n<li>unittest\n</li><li>doctest\n</li><li>brief code coverage intro\n</li><li>other testing tools\n</li></ul>\n</li><li>Functional Programming (15 min)\n<ul>\n<li>lambda\n</li><li>map\n</li><li>reduce\n</li><li>filter\n</li><li>Substitutes for above constructs\n</li></ul>\n</li><li>Functions (20 min)\n<ul>\n<li>callables\n</li><li>arguments (args, kw)\n</li><li>mutable parameters\n</li></ul>\n</li><li>Scoping (10 min)\n</li><li>Closures (5 min)\n</li><li>Decorators (20 min)\n<ul>\n<li>Simple decorators\n</li><li>parameterized decorators\n</li><li>mangling\n</li><li>templates for decorators\n</li><li>classmethod staticmethod\n</li></ul>\n</li><li>Properties (5 min)\n</li><li>List comprehensions (10 min)\n</li><li>Iterator pattern (5 min)\n</li><li>Generators (15 min )\n</li><li>Hands-on application (50 min)\n</li></ul>",
      "video_mp4_url": null,
      "tags": [
        338,
        339,
        340,
        341,
        342,
        343,
        344,
        345,
        231,
        322,
        254
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359543",
      "video_webm_url": null,
      "video_ogv_length": 590622847,
      "slug": "pycon-2010--the-meaty-parts-of-python--closures--",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-587.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010TheMeatyPartsOfPythonClosuresDecoratorsListCom541-52.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHOnkcC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 248,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        91
      ],
      "title": "Creating Rich Client Applications Using Dabo",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T18:58:00Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Creating Rich Client Applications Using Dabo</p>\n<p>Presented by Ed Leafe and Paul McNett</p>\n<p>\nWhile web applications seem to get all the attention these days, many businesses still rely on desktop, or \"rich client\", applications to run their business. For those who prefer to do their coding with Python, Dabo is the only full-featured desktop app framework.\n</p>\n<p>\nIn this tutorial, we'll cover the general structure and approach to application development used in Dabo, including lots of interactive work where we will all develop applications that will be able to query a database, display the results, allow the user to edit the data, and then save it back to the database. We will cover the various tools available in Dabo to help you develop your applications, and how they work together.\n</p>\n<p>\nIntended Audience\n</p>\n<p>\nDevelopers with basic to intermediate Python experience.\n</p>\n<p>\nClass Outline\n</p>\n<p>\nIntroduction: The thinking and design approach behind the framework. (15 min).\n</p>\n<ul>\n<li>Explanation of the framework design. Frameworks are great if you're working with them, but not if you're constantly fighting them! We'll outline the various parts of the framework, and how they work together to create applications.\n</li></ul>\n<p>\nBuilding an app in 30 seconds. (15 min)\n</p>\n<ul>\n<li>You can use the AppWizard to create a completely functional CRUD application in less than 30 seconds. We'll demonstrate how to use the AppWizard, and how you can build on and further customize the application it creates.\n</li></ul>\n<p>\nThe primary non-UI classes in Dabo (15 min)\n</p>\n<ul>\n<li>There are lots of classes in Dabo, but only a few main ones that are used in every app. This section will cover them: the application class, the business object class, and the DBAPI data adapter class.\n</li></ul>\n<p>\nIntroduction to the Dabo Tools (30 min)\n</p>\n<ul>\n<li>One of the benefits of a framework is that the mundane, repetitive tasks are handled by the framework, leaving you to focus on the creative parts of app development. In this section we'll discuss several of the visual tools available to help you create Dabo applications faster and easier.\n</li></ul>\n<p>\nDeveloping an actual application, part 1 (15 min)\n</p>\n<ul>\n<li>Talk is fine, but here's where we begin creating an actual application. Attendees will learn how to create a new Dabo app, along with database connections, menus and a main form. In the second half of the tutorial we'll use this app as the basis for more complex development.\n</li></ul>\n<p>\nREFRESHMENT BREAK\n</p>\n<p>\nOverview of UI Classes (30 min)\n</p>\n<ul>\n<li>This is where we talk about the \"rich\" in \"rich client\". Dabo has a full set of UI widgets, based on the wxPython toolkit. We've taken those widget classes and added a consistent interface, so that the developer uses the same properties and methods to accomplish the same thing in all the classes, making developing smoother and more intuitive. We'll cover all of the most-commonly used controls, and how to work with them.\n</li></ul>\n<p>\nDeveloping an actual application, part 2 (30 min)\n</p>\n<ul>\n<li>The basic app created in the first half was an impressive result for such a short amount of time, but here's where we'll start to make it more interesting. We'll create several related business objects, bind them to the UI elements, and have it all work seamlessly with a database. After that, we'll show how to create and run reports against that same data. We'll then wrap up by explaining how to deploy your finished application.\n</li></ul>\n<p>\nRich Client Web Applications with Dabo (10 min)\n</p>\n<ul>\n<li>HTML web apps are trying to get a richer client experience through the increased use and sophistication of Javascript-based tools. That's great if you like spending your time in Javascript, but not so great if you are a Python dev. We take the opposite approach: taking our rich-client apps and deploying them over the web so that users can run them without first installing the app.\n</li></ul>\n<p>\nFuture plans for Dabo (5 min)\n</p>\n<ul>\n<li>Dabo is being actively developed, and we have plans for future enhancements that we'll cover here.\n</li></ul>\n<p>\nWrap-up and Final Questions (15 min)\n</p>\n<p>\nRequirements\n</p>\n<p>\nStudents do not need to have a computer, but they will not get as much out of the session if they cannot actively participate in creating the example applications. They should have the following prerequisites installed, using the latest available stable releases except where specific version numbers are indicated:\n</p>\n<ul>\n<li>Python 2.5.4\n</li><li>wxPython 2.8.10.1 unicode\n</li><li>MySQLdb\n</li><li>reportlab\n</li><li>Python Imaging Library\n</li><li>Dabo 0.9.2\n</li></ul>",
      "video_mp4_url": null,
      "tags": [
        346,
        231,
        322,
        234
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359460",
      "video_webm_url": null,
      "video_ogv_length": 955215464,
      "slug": "pycon-2010--creating-rich-client-applications-usi",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-789.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010CreatingRichClientApplicationsUsingDabo644-559.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigc6ddQI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 249,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [],
      "title": "Introduction to Internet Programming",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T18:54:54Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>\nIntroduction to Internet Programming (Wesley J. Chun)\n</p>\n<p>\nPython is an interpreted, cross-platform, object-oriented programming language that is popular for a wide range of applications, one of which is Internet programming. This tutorial introduces current Python programmers to 3-4 distinct areas of Internet programming, each in self-contained lectures with a demonstration of code following each lecture topic.\nIntended Audience\n</p>\n<p>\nDevelopers familiar with Python who are interested in exploring client/server network programming with sockets, Internet client (FTP, NNTP, e-mail), development and web programming.\n</p>\n<p>\nClass Outline\n</p>\n<p>\nPython is an interpreted, cross-platform, object-oriented programming language that is popular for a wide range of applications, one of which is Internet programming. This tutorial introduces current Python programmers to distinct areas of Internet programming, each in self-contained lectures with a demonstration of code following these lecture topics (each ranging from 20-60min in length):\n</p>\n<ul>\n<li>Network Programming using Sockets\n</li><li>Internet Client Programming\n</li><li>Web/CGI Programming and Concepts\n</li><li>Intro to Django (time-permitting)\n</li></ul>\n<p>\nWe start at the lowest layer, where one creates communication channels directly between clients and servers using sockets then move up one level to discuss well-known Internet protocols such as FTP. Then we move up even higher to address the concept of web programming, including a description and purpose of all \"CGI\" interfaces, and finally, if there's time, to give a high-level quick introduction to one of the most popular Python web frameworks today, Django. We'll try build and implement a simple blog in 15-20 minutes! This is especially for those of you who couldn't sign up for the intro to Django tutorial at this PyCon which will likely be full.\n</p>\n<p>\nAbout the Instructor\n</p>\n<p>\nWESLEY J. CHUN, MSCS, is the author of Prentice Hall's bestseller, \"Core Python Programming\", its video training course, \"Python Fundamentals\" (LiveLessons DVD), and co-author of \"Python Web Development with Django\". In addition to being a software architect and Developer Advocate for Google, he runs CyberWeb, a consulting business specializing in Python software engineering and technical training. He has over 25 years of programming, teaching, and writing experience, including more than a decade of Python. While at Yahoo!, he helped create Yahoo! Mail and Yahoo! People Search using Python. He holds degrees in Computer Science, Mathematics, and Music from the University of California.\n</p>",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        234,
        92
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359441",
      "video_webm_url": null,
      "video_ogv_length": 1431136501,
      "slug": "pycon-2010--introduction-to-internet-programming",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-718.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010IntroductionToInternetProgramming900-958.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigc6dYgI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 250,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        92
      ],
      "title": "Relational Database Applications",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T18:50:05Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Turbogears Database Applications (Relational Database Applications)</p>\n<p>Presented by Chris Perkins</p>\n<p>\nTurboGears2 provides a rich toolset to provide developers with a platform for developing web applications with existing databases. This \u00e2\u20ac\u0153un-tutorial\u00e2\u20ac\u009d has a simple goal. The participants may bring in their own databases, and we will explore how TurboGears can use this database to create a working web application. If the student does not want to use her own database, one will be provided. This tutorial will focus on the TurboGears Admin system, along with relational databases.\n</p>\n<p>\nThis tutorial is intended to be an un-tutorial. The idea is simple. Bring a public database, (or 4) and share with the class as we explore the new admin-level RESTful features that TurboGears2 employs.\n</p>\n<p>\nAt the end of the class, the goal is for everyone to have a working TG2 application, with a working admin, at least one customized form or table, based on a database they, or another student brought to class.\n</p>\n<p>\nRequirements\n</p>\n<p>\nLaptop with Python 2.5 or 2.6 installed. Database system of your choice (Postgres, Sqlite, MySQL) Python drivers for your desired database system installed. (psychopg2, pg8000, pysqlite, mysql-python)\n</p>",
      "video_mp4_url": null,
      "tags": [
        46,
        231,
        322,
        230,
        234
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359427",
      "video_webm_url": null,
      "video_ogv_length": 655710188,
      "slug": "pycon-2010--relational-database-applications",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-268.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010RelationalDatabaseApplications742.png",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigc6dVAI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 251,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        93
      ],
      "title": "Implementing Domain Specific Languages In Python",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T18:48:13Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Implementing Domain Specific Languages In Python</p>\n<p>Presented by Sean Jensen-Grey</p>\n<p>\nIntended Audience\n</p>\n<p>\nIntermediate\n</p>\n<p>\nClass Outline\n</p>\n<ul>\n<li>What are DSLs? Internal/External\n</li><li>Why DSLs?\n</li><li>How can they be expressed in Python?\n</li><li>Mini Language Design\n</li><li>Implementing External DSLs\n</li><li>Web / AI / Enterprise\n</li><li>Testing\n</li><li>Documenting\n</li></ul>\n<p>\nRequirements\n</p>\n<p>\nStudents should have their own computer with Python 2.6 installed\n</p>",
      "video_mp4_url": null,
      "tags": [
        347,
        231,
        322,
        234
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359419",
      "video_webm_url": null,
      "video_ogv_length": 1472851836,
      "slug": "pycon-2010--implementing-domain-specific-language",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-466.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010ImplementingDomainSpecificLanguagesInPython841-952.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigc6dTAI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 252,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        94
      ],
      "title": "Introduction to SQLAlchemy",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T18:44:30Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Introduction to SQLAlchemy</p>\n<p>Presented by Johnathan Ellis</p>\n<p>\nSQLAlchemy is the premier SQL toolkit for Python. SQLAlchemy exposes the full power of SQL while remaining easy to use for the basics, and is flexible enough to work with existing database schemas as well as fresh designs. SQLAlchemy is used in production by leading Python web frameworks Pylons and Turbogears as well as many other web and non-web developers.\n</p>\n<p>\nThis tutorial teaches SQLAlchemy's object-relational mapping to automate painlessly loading and persisting objects from and to your database, even when complex relationships exist.\n</p>\n<p>\nIntended Audience\n</p>\n<p>\nPython experience: intermediate. You should already have some hands-on experience with Python and be comfortable reading modern Python code.\n</p>\n<p>\nSQL experience: beginning. You should know how to SELECT, INSERT, and DELETE, and how to read queries involving JOINs, but we will only be reading the SQL generated by SA, not writing our own.\n</p>\n<p>\nORM experience: prior experience with an object-relational mapper is not necessary.\n</p>\n<p>\nClass Outline\n</p>\n<p>\nIntroduction:\n</p>\n<ul>\n<li>Philosophy\n</li><li>SA features\n</li></ul>\n<p>\nFundamentals:\n</p>\n<ul>\n<li>Introduction to ORM\n</li><li>Data Mapper pattern vs Active Record\n</li><li>Tables\n</li><li>Mapping basics\n</li></ul>\n<p>\nQueries:\n</p>\n<ul>\n<li>Conditions, operators\n</li><li>Joins\n</li><li>lazy / eager loading\n</li><li>Relation-based queries\n</li></ul>\n<p>\nSessions & identity map:\n</p>\n<ul>\n<li>detatching, attaching objects\n</li><li>Lifecycle relations\n</li></ul>\n<p>\nMore Mapping:\n</p>\n<ul>\n<li>one to one, many to many\n</li><li>backreferences\n</li></ul>\n<p>\nExtensions, etc.:\n</p>\n<ul>\n<li>DDL\n</li><li>Migrate\n</li><li>FormAlchemy\n</li><li>SqlSoup\n</li><li>Elixir\n</li></ul>\n<p>\nRequirements\n</p>\n<p>\nLaptop with Python 2.5 or 2.6 and SQLAlchemy 0.6 installed. Code samples may also work with Python 2.4 but will not be tested on that platform. SQLAlchemy also supports Jython and cPython 3.x, but this tutorial will be using \"classic\" cPython.\n</p>",
      "video_mp4_url": null,
      "tags": [
        348,
        349,
        350,
        351,
        42,
        231,
        322,
        253,
        352,
        234
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359404",
      "video_webm_url": null,
      "video_ogv_length": 884586519,
      "slug": "pycon-2010--introduction-to-sqlalchemy",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-136.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010IntroductionToSQLAlchemy295-517.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigc6dPQI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 253,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        95
      ],
      "title": "Python 201: How to Solve It Using Python",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T18:42:41Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Python 201: How to Solve it using Python</p>\n<p>Presented by Senthil Kumaran</p>\n<p>\nOne good way to develop applications is to divide the problem into smaller manageable chunks and the build those. Once we identify and define those smaller piece of tasks, our problem becomes incredibly easy.\n</p>\n<p>\nBut we are still faced with the question of what is the best way to do that smaller task in Python? This tutorial will answer those questions.\n</p>\n<p>\nIn this tutorial, we will identify the commonly occurring tasks that would fit into to bigger problems and learn how do we solve it using Python.\n</p>\n<p>\nThe aim of the tutorial is help you develop the correct intuition when developing applications using Python.\n</p>\n<p>\nIntended Audience\n</p>\n<p>\nBeginning to intermediate Python Programmers. Familiarity with Python's syntax and usage is assumed.\n</p>\n<p>\nThis tutorial will use Python 3.1 examples (with changes from Python 2.6 explained, when it is required).\n</p>\n<p>\nThe source code and the handout will contain the snippets written in both Python 2.6 and Python 3.1.\n</p>\n<p>\nClass Outline\n</p>\n<ul>\n<li>Outline of the Tutorial and a Brief Overview of Standard Library.\n</li><li>Lets start with Strings.\n</li><li>Files - We deal with them often.\n</li><li>Date time related tasks.\n</li><li>Dealing with Database stuff.\n</li><li>Process Handling.\n</li><li>Processing XMLs.\n</li><li>Web Programming\n</li><li>Programming tasks.\n</li><li>Unit Testing\n</li><li>How to Convert Python 2 to Python 3.\n</li></ul>\n<p>\nRequirements\n</p>\n<p>\nAttendees are welcome to bring their laptops with Python installed ( version 3.1 and version 2.6 both installed).\n</p>\n<p>\nSome snippets will be using Twisted Matrix Framework, those who would like to try those recipes, would like to have Twisted Package installed for their Python Distribution.\n</p>\n<p>\n[VIDEO HAS ISSUES: Some missing sections of video due to technical issues (approx 3 mins in)]\n</p>",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        258,
        21,
        234,
        353
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359399",
      "video_webm_url": null,
      "video_ogv_length": 1023524470,
      "slug": "pycon-2010--python-201--how-to-solve-it-using-pyt",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-537.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010Python201HowToSolveItUsingPython440-675.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigc6dOAI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 254,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [],
      "title": "wxPython I: Introduction to GUI Programming",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T18:39:23Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>wxPython I: Introduction to GUI Programming</p>\n<p>David Goodger</p>\n<p>\nwxPython is an open-source graphical user interface (GUI) toolkit that runs on multiple platforms, including Linux, Windows, and Mac OS X. By the end of this tutorial, attendees will have built a simple form-based application from scratch using wxPython. We will build the application step by step, discussing the choices and rationale as we go.\n</p>",
      "video_mp4_url": null,
      "tags": [
        354
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359382",
      "video_webm_url": null,
      "video_ogv_length": 1303869139,
      "slug": "pycon-2010--wxpython-i--introduction-to-gui-progr",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-658.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010wxPythonI488.png",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigc6dJwI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 255,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        96
      ],
      "title": "Introduction to Django",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T18:36:15Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Introduction to Django</p>\n<p>Presented by Chander Ganesan</p>\n<p>\nThe Django framework is a fast, flexible, easy to learn, and easy to use framework for designing and deploying web sites and services using Python. In this session, we'll cover the fundamentals of development with Django, generate a Django data model, and put together a simple web site using the framework.\n</p>\n<p>\nIntended Audience\n</p>\n<p>\nBeginner to Intermediate Python programmers\n</p>\n<p>\nClass Outline\n</p>\n<ul>\n<li>Django Overview and Basic Introduction (~ 5 min)\n</li><li>Downloading & Installing Dango (~ 10 min)\n</li><li>Creating a new project (~ 5 min)\n</li><li>Choosing a database (~ 5 min)\n</li><li>Creating a new application (~ 5 min)\n</li><li>Installing & Using Django contrib applications (~ 7 min)\n</li><li>Overview of Django flow (i.e., URLconf expression, view function, HTTPResponse object, etc.) (~7 min)\n</li><li>Generating Simple Dango Views (~ 5 min)\n</li><li>Configuring a URLConf for basic views (~ 5 min)\n</li><li>Creating Django Templates (template syntax, common filters and tags, loops, etc) (~ 10 min)\n</li><li>Creating & using Template Context objects (~ 5 min)\n</li><li>Introduction to Django Models (~ 10 min)\n</li><li>Defining basic Django models (~ 15 min)\n</li><li>Understanding basic model fields & options (~ 15 min)\n</li><li>Generating & Reviewing Model SQL (~ 5 min)\n</li><li>Adding data to a model (~ 7 min)\n</li><li>Simple data retrieval using models (~ 7 min)\n</li><li>Working with QUerySets (filters, slicing, ordering, common methods) (~ 10 min)\n</li><li>Overview of Q objects (~ 5 min)\n</li><li>Using the Admin interface (~ 10 min)\n</li><li>Using Generic views (~ 10 min)\n</li><li>Access control with sessions & users (~ 10 min)\n</li></ul>\n<p>\nRequirements\n</p>\n<ul>\n<li>Attendees wishing to try the examples should have Python 2.6 pre-installed (<a href=\"http://www.python.org\">http://www.python.org</a>)\n</li><li>Attendees should have Django pre-downloaded or pre-installed. (<a href=\"http://www.djangoproject.com\">http://www.djangoproject.com</a>)\n</li></ul>",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        234
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359371",
      "video_webm_url": null,
      "video_ogv_length": 965199376,
      "slug": "pycon-2010--introduction-to-django",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-989.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010IntroductionToDjango732.png",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigc6dHAI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 256,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        97
      ],
      "title": "Scrape the Web: Strategies for programming websites that don't expect it",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T18:27:27Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Scrape the Web: Strategies for programming websites that don't expect it\n<br /><br />\nPresented by Asheesh Laroia\n<br /><br />\nDo you find yourself faced with websites that have data you need to extract? Would your life be simpler if you could programmatically input data into web applications, even those tuned to resist interaction by bots?\n<br /><br />\nYear by year, the web is becoming a stronger force. Learn how to get the best of it.\n<br /><br />\nWe'll discuss the basics of web scraping, and then dive into the details of different methods and where they are most applicable. You'll leave with an understanding of when to apply different tools, and learn about automating a full web browser, a \"heavy hammer\" that I picked up at a project for the Electronic Frontier Foundation.\n<br /><br />\nAtendees should bring a laptop, if possible, to try the examples we discuss and optionally take notes. Code samples will be made available after class with no restrictions.\nIntended Audience\n<br /><br />\nIntermediate (or better) Python programmers, probably without extensive web testing experience\n<br /><br />\nClass Outline\n<ul>\n<li>My motto: \"The website is the API.\"\n</li><li>Choosing a parser: BeautifulSoup, lxml, HTMLParse, and html5lib.\n</li><li>Extracting information, even in the face of bad HTML: Regular expressions, BeautifulSoup, SAX, and XPath.\n</li><li>Automatic template reverse-engineering tools.\n</li><li>Submitting to forms.\n</li><li>Playing with XML-RPC\n</li><li>DO NOT BECOME AN EVIL COMMENT SPAMMER.\n</li><li>Countermeasures, and circumventing them:\n<ul>\n<li>IP address limits\n</li><li>Hidden form fields\n</li><li>User-agent detection\n</li><li>JavaScript\n</li><li>CAPTCHAs\n</li></ul>\n</li><li>Plenty of full source code to working examples:\n<ul>\n<li>Submitting to forms for text-to-speech.\n</li><li>Downloading music from web stores.\n</li><li>Automating Firefox with Selenium RC to navigate a pure-JavaScript service.\n</li></ul>\n</li><li>Q&A; and workshopping\n</li><li>Use your power for good, not evil.\n</li></ul>",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        129,
        92
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359320",
      "video_webm_url": null,
      "video_ogv_length": 851529869,
      "slug": "pycon-2010--scrape-the-web--strategies-for-progra",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-598.ogv",
      "video_webm_length": null,
      "summary": "<p>We'll discuss the basics of web scraping, and then dive into the details of different methods and where they are most applicable. You'll leave with an understanding of when to apply different tools, and learn about automating a full web browser, a \"heavy hammer\" that I picked up at a project for the Electronic Frontier Foundation.</p>",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010ScrapeTheWebStrategiesForProgrammingWebsitesTha613-141.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigc6caQI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 257,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        98
      ],
      "title": "Python 102",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T18:25:46Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Python 102</p>\n<p>Presented by Stuart Williams</p>\n<p>\nThis half-day tutorial presents intermediate and some advanced features of Python to beginning and intermediate programmers. It pairs well with Python 101 which follows a similar outline but at a more introductory level.\n</p>\n<p>\nRather than starting with \"Hello, world!\", we use the interactive Python interpreter shell to get hands-on familiarity with much of core Python before covering blocks and scripts.\n</p>\n<p>\nThe tutorial is divided into short sections, each with presentation and hands-on exercises, to quickly cover lots of ground.\n</p>\n<p>\nAdvanced topics are introduced throughout and covered in \"extra credit\" exercises such that more advanced participants can learn at their own pace.\n</p>\n<p>\nIntended Audience\n</p>\n<p>\nProgrammers with experience in other languages who want a fast hands-on introduction to intermediate and some advanced features of Python. Content will target both Python 3.1 and 2.6.\n</p>\n<p>\nClass Outline\n</p>\n<ul>\n<li>Numbers and Strings - operators, functions and methods\n</li><li>Introspection\n</li><li>Sequences - overview, concepts, and methods\n</li><li>Objects\n</li><li>Dictionaries\n</li><li>Files\n</li><li>Classes\n</li><li>Namespaces\n</li><li>Dynamic Classes\n</li><li>Iterators and Generators\n</li><li>Functions\n</li><li>Exceptions\n</li><li>Standard Library\n</li></ul>\n<p>\nRequirements\n</p>\n<p>\nBring a laptop computer with Python 2.6 or 3.1 installed. Try to get as much of an overview of Python before the tutorial as you have time to in order to get more out of the tutorial. Two angles on this are the Python Quick Reference and the Python website's tutorial.\n</p>",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        258,
        234
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359312",
      "video_webm_url": null,
      "video_ogv_length": null,
      "slug": "pycon-2010--python-102",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-897.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010Python102442.png",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigc6cYQI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 258,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        99
      ],
      "title": "Scaling Python webapps from zero to 50 million users - A top-down approach. (#134)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T18:22:53Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Scaling Python webapps from zero to 50 million users - A top-down approach</p>\n<p>Presented by Jinal Jhaveri</p>\n<p>\nLOLapps is one of the top providers of social games and user generated applications with 50+ million monthly uniques on Facebook, MySpace and Bebo. This session will focus on the top-down approach we took to scale our webapps for millions of users. Here are the 6 topics we will cover:\n</p>\n<ul>\n<li>Why is performance a big issue for Social Media\n</li><li>How we profiled our apps and found bottlenecks using custom developed and existing middleware\n</li><li>The web application best practices we applied and results obtained\n</li><li>How we traced database connection leaks\n</li><li>Our caching strategies and the changes we made to speed up the memcache client\n</li><li>Results of our experiment using Paster and Tornado as our web servers.\n</li></ul>",
      "video_mp4_url": null,
      "tags": [
        56,
        46,
        124,
        355,
        356,
        231,
        322,
        357
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359300",
      "video_webm_url": null,
      "video_ogv_length": 131211611,
      "slug": "pycon-2010--scaling-python-webapps-from-zero-to-5",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-887.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010ScalingPythonWebappsFromZeroTo50MillionUsers288-77.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHOnFUC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 259,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        87
      ],
      "title": "py.test - Rapid Testing with Minimal Effort",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-17T18:22:47Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>py.test I - rapid testing with minimal effort</p>\n<p>Presented by Holger Krekel</p>\n<p>\nWant to learn writing tests in Python? This tutorial introduces basic practises using the popular py.test (<a href=\"http://pytest.org\">http://pytest.org</a>) tool. We start with an overview on testing and tools in Python and then discuss and exercise basic idioms in a step-by-step manner. We cover the basic writing, organisation and running of tests and debugging options. In the second part we discuss setup and teardown of test state, usage and configuration of test functions arguments and introduce coverage testing. We will close with time to answer questions and discuss topics from the participants.</p>\n<p>\nIntended Audience\n</p>\n<p>\nbeginner programmers\n</p>\n<p>\nPerequisites/knowledge: basic knowledge of python programming\n</p>\n<p>\nRequirements: Laptop with Python 2.4 or greater installed. Pairing welcome.\noutline\n</p>\n<ul>\n<li>why automated testing?\n</li><li>Developer oriented automated tests\n</li><li>The test tool question\n</li><li>py.test basics\n</li><li>py.test fundamental features\n</li><li>cross-project test tool\n</li><li>A Typical Python test layout\n</li><li>Another typical test layout\n</li><li>Choosing a test layout\n</li><li>automatic test discovery\n</li><li>mind the __init__.py files\n</li><li>no boilerplate python test code\n</li><li>assert introspection\n</li><li>asserting expected exceptions\n</li><li>print() debugging / output capturing\n</li><li>Getting Started, basic usage [0]\n</li><li>Failure / Traceback Demo [0]\n</li><li>Skipping tests\n</li><li>Dynamically skipping tests\n</li><li>Marking test functions\n</li><li>Marking a test for conditional skip\n</li><li>Marking a test as expected to fail\n</li><li>Conditional expected to fail\n</li><li>Marking / Skipping exercise [0]\n</li><li>Applying Marks to classes or modules\n</li><li>break\n</li><li>warm up: boilerplate test code\n</li><li>\"myscan\" Exercises of this tutorial\n</li><li>sketching our \"myscan\" project\n</li><li>Starting Exercise [1]\n</li><li>The example Solution [1]\n</li><li>The \"test setup\" and fixture Problem\n</li><li>test functions and funcargs\n</li><li>How do funcargs work?\n</li><li>funcarg factory notes\n</li><li>builtin funcargs\n</li><li>usage example: per-test temporary directory\n</li><li>next step: adding more tests [2]\n</li><li>observation on new tmpdir-using tests\n</li><li>The mysetup pattern\n</li><li>How the mysetup pattern works\n</li><li>next step: introducing \"mysetup\" pattern [3]\n</li><li>The new test function using \"mysetup\"\n</li><li>a simple hook: adding a command line opt\n</li><li>the py.test config object\n</li><li>exercise: implement a new command line option [4]\n</li><li>myscan example completed\n</li><li>py.test hooks and plugins\n</li><li>Installing \"global\" plugins\n</li><li>exercise: use the \"figleaf\" plugin\n</li><li>local plugins: conftest.py\n</li><li>a simple config: ignoring directories\n</li><li>a simple default option: verbose\n</li><li>quick discussion of advanced usages\n</li><li>Summary / questions and answers\n</li></ul>",
      "video_mp4_url": null,
      "tags": [
        264,
        231,
        322,
        234
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3359299",
      "video_webm_url": null,
      "video_ogv_length": 981861155,
      "slug": "pycon-2010--py-test---rapid-testing-with-minimal-",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-402.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010pytestRapidTestingWithMinimalEffort216-303.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigc6cVAI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 260,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [],
      "title": "Sunday Afternoon Lightning Talks",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:58:58Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Plenary: Afternoon Lightning Talks</p>\n<p>\n(02:20) Steve Holden - Lightning talk about lightning talks\n</p>\n<p>\n(02:55) Michael Foord - Little Bit of Python podcast, upcoming unittest stuff, mock\n</p>\n<p>\n(08:00) Harald Armin Massa - The real harm of functional programming\n</p>\n<p>\n(11:41) Karl ? - FreeBSD certiciation\n</p>\n<p>\n(13:50) Peter Fein - Please Pirate\n</p>\n<p>\n(19;15) Chris McDonough - writing books with Sphinx (<a href=\"http://bfg.repoze.org/book\">repoze.bfg</a>); <a href=\"https://www.createspace.com/\">createspace</a>\n</p>\n<p>\n(22:05) Chris Petrilli - celery, distributed task queue\n</p>\n<p>\n(26:30) Godefroid Chapelle - vim and pdb\n</p>\n<p>\n(29:20) ? - fork() vs. threads\n</p>\n<p>\n(33:40) - doing pyweek game with a large number of contributors\n</p>\n<p>\n(38:05) Jason Huggins - Orbison\n</p>\n<p>\n(43:20) Noufal Brahim - State of Python community in India\n</p>\n<p>\n(47:40) Mike M\u00c3\u00bcller - EuroSciPy 2010\n</p>\n<p>\n(49:50) David gives away stuff, sprint intros, ...\n</p>",
      "video_mp4_url": null,
      "tags": [
        48,
        358,
        359,
        360,
        361,
        341,
        362,
        363,
        364,
        231,
        322,
        365,
        366,
        367,
        325,
        336
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332814",
      "video_webm_url": null,
      "video_ogv_length": 292349113,
      "slug": "pycon-2010--sunday-afternoon-lightning-talks",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010SundayAfternoonLightningTalks917.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010SundayAfternoonLightningTalks917-863.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzWoC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 261,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [],
      "title": "Sunday Morning Lightning Talks",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:58:12Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Sunday morning lightning talks</p>\n<p>\n(00:20) Tim Cooper - Lightning sound bytes\n</p>\n<p>\n(01:05) Gregg Lind, Dan Callahan - Python spring cleanup, contributing to FLOSS projects\n</p>\n<p>\n(05:30) Natalia Bidart, Mat\u00c3\u00adas Bordese, Facundo Batista - PyAr\n</p>\n<p>\n(10:40) D Huggins - You got your Cython in my NumPy\n</p>\n<p>\n(16:05) Ken Elkabany - PiCloud\n</p>\n<p>\n(21:20) Tim Fernando - Mobile web in Django\n</p>\n<p>\n(26:40) ? - Running a standard webapp on stackless; monkeypatching\n</p>",
      "video_mp4_url": null,
      "tags": [
        368,
        369,
        370,
        371,
        372,
        231,
        322,
        211
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332810",
      "video_webm_url": null,
      "video_ogv_length": 162933889,
      "slug": "pycon-2010--sunday-morning-lightning-talks",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-858.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010SundayMorningLightningTalks444-479.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzWYC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 262,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        100
      ],
      "title": "Keynote: State of Unladen Swallow",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:58:08Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Keynote: State of Unladen Swallow\n<br /><br />\nPresented by Collin Winter\n<br /><br />\nTalks about the current state of Unladen Swallow.",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        373
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332804",
      "video_webm_url": null,
      "video_ogv_length": 32311708,
      "slug": "pycon-2010--keynote--state-of-unladen-swallow",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-700.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010KeynoteStateOfUnladenSwallow347-122.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzWAC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 263,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        101
      ],
      "title": "Keynote: Relentlessly Pursuing Opportunities With Python, or why the AIs will Spare Us All!",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:58:07Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Keynote: Relentlessly pursuing opportunities with Python, or why the AIs will Spare us all!\n<br /><br />\nPresented by Antonio Rodriguez\n<br /><br />\nTalks about how in every startup, success is defined by how many people you can get to hack.",
      "video_mp4_url": null,
      "tags": [
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332807",
      "video_webm_url": null,
      "video_ogv_length": 162565085,
      "slug": "pycon-2010--keynote--relentlessly-pursuing-opport",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-514.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010KeynoteRelentlesslyPursuingOpportunitiesWithPytho562-469.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzWMC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 264,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        102
      ],
      "title": "Persistent Graphs in Python with Neo4j (#140)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:57:19Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Persistent Graphs in Python with Neo4j\n<br /><br />\nPresented by Tobbias Ivarsson\n<br /><br />\nDatabases that employ a data model other than the relational model are increasingly a hot topic. Neo4j is an open source database where the data model is a graph. Data in Neo4j is stored as Nodes and Relationships in between nodes. A lot of the data we model in applications every day is actually graph oriented, having a database that persists such data natively is a huge benefit. In this presentation we will see how to use Neo4j in Python, and demonstrate this with a web application in Django.",
      "video_mp4_url": null,
      "tags": [
        374,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332786",
      "video_webm_url": null,
      "video_ogv_length": 170064119,
      "slug": "pycon-2010--persistent-graphs-in-python-with-neo4",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-211.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010PersistentGraphsInPythonWithNeo4j140164-779.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzU4C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 265,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        103
      ],
      "title": "PLY and PyParsing (#93)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:57:12Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "PLY and PyParsing\n<br /><br />\nPresented by Andrew Dalke\n<br /><br />\nGot a text parsing problem? In most cases using string manipulation and regular expressions will solve it for you. But when the input is complex, try reaching for a parsing system to help out.\n<br /><br /> \nThe two most popular in Python are PLY and PyParsing. PLY follows the lex/yacc tradition with a domain specific language to describe the tokens and grammar. It was built with both error diagnostics and performance in mind. PyParsing is a recursive descent parser which expresses the format as a Python data structure. It make no distinction between lexer and grammar and has a uniform callback system which makes certain types of data extraction very easy.\n<br /><br />\nIn my talk I'll show the basics of how to use both systems for several different format parsing tasks, of different complexity. This will let you see how to use the parsers and understand more of the tradeoffs between complexity, readability, error handling, and performance. ",
      "video_mp4_url": null,
      "tags": [
        331,
        231,
        322,
        375
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332803",
      "video_webm_url": null,
      "video_ogv_length": 163502409,
      "slug": "pycon-2010--ply-and-pyparsing---93",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-720.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010PLYAndPyParsing93735-488.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzV8C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 266,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        104
      ],
      "title": "Keynote: State of PyPy",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:57:06Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Keynote: State of PyPy\n<br /><br />\nPresented by Maciej Fijalkowski\n<br /><br />\nTalks about the current state of PyPy.",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        91
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332796",
      "video_webm_url": null,
      "video_ogv_length": 32758929,
      "slug": "pycon-2010--keynote--state-of-pypy",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-883.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010KeynoteStateOfPyPy184-324.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzVgC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 267,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        105,
        26
      ],
      "title": "Keynote: State of CPython",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2012-03-23T01:42:18Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>\r\nUses the Twitter feed for PyCon and a floor mic for a Q&amp;A; session covering the state of CPython and what's in the future.\r\n</p>",
      "video_mp4_url": "",
      "tags": [
        18,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332776",
      "video_webm_url": "",
      "video_ogv_length": 222198009,
      "slug": "keynote-state-of-cpython",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010KeynoteStateOfCPython844.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010KeynoteStateOfCPython844-859.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzUQC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 268,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        106
      ],
      "title": "Cooperative Multitasking with Twisted: Getting Things Done Concurrently. (#11)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:57:00Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Cooperative Multitasking with Twisted: Getting Things Done Concurrently\n<br /><br />\nPresented by David A Reid\n<br /><br />\nTwisted is a framework for building asynchronous networking applications. It also provides powerful tools for writing non-blocking non-network code, tools which are vital for building real large scale applications in Twisted. I hope to give a comprehensive overview of these tools to help the intermediate Twisted user get things done concurrently.\n<br /><br />\n[VIDEO HAS ISSUES: Picture out of focus at the beginning]",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        195
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332798",
      "video_webm_url": null,
      "video_ogv_length": 162419672,
      "slug": "pycon-2010--cooperative-multitasking-with-twisted",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010CooperativeMultitaskingWithTwistedGettingThingsD951.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010CooperativeMultitaskingWithTwistedGettingThingsD951-91.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzVoC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 269,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        107
      ],
      "title": "Cross platform application development and distribution (#116)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:56:37Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Cross platform application development and distribution\n<br /><br />\nPresented by Stani Michiels and Nadia Alramli\n<br /><br />\nYou think Python gives you native cross platform applications for free? Think twice.\nAre you interested in distributing your application to other platforms but not sure how?\n<br /><br />\nWe will give tips and examples on how to enhance the native feel of your application: notifications, registration of file types and more. The talk will also help you to avoid common pitfalls and provides solutions for designing cross platform user interfaces. (Although we use wxPython as an example, the principles are valid for other toolkits as well.) We'll show you where to start if you want to distribute your application to different platforms, briefly discussing tools like py2exe, py2app and Debian/Ubuntu packaging ecosystem. This talk is based on our experience from developing Phatch (Photo Batch Processor) and SPE (Python Editor).",
      "video_mp4_url": null,
      "tags": [
        376,
        152,
        377,
        245,
        231,
        322,
        378
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332781",
      "video_webm_url": null,
      "video_ogv_length": 146848147,
      "slug": "pycon-2010--cross-platform-application-developmen",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-206.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010CrossPlatformApplicationDevelopmentAndDistributio341.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzUkC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 270,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        108
      ],
      "title": "Threading is not a model (#187)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:56:27Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Threading is not a model\n<br /><br />\nPresented by Joe Gregorio\n<br /><br />\nWe have many concurrency/multiprocessing capabilities at our finger tips, such as threads, processes, locks, mutexes, select, epoll, transactional memory, etc. But none of them are a model for multiprocessing, they are only tools on which you would build an implementation of such a model. So what are the models we can choose from? How would they be implemented in Python? And why may the GIL actually be a good thing?",
      "video_mp4_url": null,
      "tags": [
        379,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332793",
      "video_webm_url": null,
      "video_ogv_length": 190916744,
      "slug": "pycon-2010--threading-is-not-a-model---187",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-453.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010ThreadingIsNotAModel187938-427.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzVUC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 271,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        109
      ],
      "title": "How Python, TurboGears, and MongoDB are Transforming SourceForge.net (#47)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:56:00Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "How Python, TurboGears, and MongoDB are transforming SourceForge.net\n<br /><br />\nPresented by Rick Copeland\n<br /><br />\nIn mid-2009, SourceForge embarked on a quest to modernize our websites, starting with the download (consumer) flow on SourceForge.net. A small team was tasked the rewrite, converting a site originally implemented in PHP with Python. Using a customized TurboGears as a core component, the rewrite was completed and the new site deployed in under 2 months. This talk tells the story of that rewrite and explains our new technology stack, which includes TurboGears, MongoDB, and Jinja templates.",
      "video_mp4_url": null,
      "tags": [
        380,
        381,
        231,
        322,
        230
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332791",
      "video_webm_url": null,
      "video_ogv_length": 126931888,
      "slug": "pycon-2010--how-python--turbogears--and-mongodb-a",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-575.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010HowPythonTurboGearsAndMongoDBAreTransformingSou564-509.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzVMC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 272,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        110
      ],
      "title": "Powering the real-time web with Python: PubSubHubbub on App Engine (#173)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:55:20Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Powering the real-time web with Python: PubSubHubbub on App Engine\n<br /><br />\nPresented by Brett Slatkin\n<br /><br />\nPubSubHubbub is an open protocol that turns Atom and RSS feeds into real-time streams. I built the reference Hub run by Google using Python and App Engine. In this talk you will learn how I made the real-time system work: An intro to the protocol, asynchronous processing on App Engine, fault-tolerance, and scalability.\n<br /><br />\nFor details on PubSubHubbub and the Hub's source code, see\n<a href=\"http://code.google.com/p/pubsubhubbub/\">http://code.google.com/p/pubsubhubbub/</a>.",
      "video_mp4_url": null,
      "tags": [
        382,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332787",
      "video_webm_url": null,
      "video_ogv_length": 149807635,
      "slug": "pycon-2010--powering-the-real-time-web-with-pytho",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-154.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010PoweringTheRealtimeWebWithPythonPubSubHubbubOn236-232.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzU8C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 273,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        111
      ],
      "title": "Keynote: Cadence, Quality and Design",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:54:38Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Keynote: Cadence, Quality and Design\n<br /><br />\nPresented by Mark Shuttleworth\n<br /><br />\nTalks about things we can do as a community to accelerate the development of software, increase collaboration, and build better applications.  Approaches this by talking about cadence, quality and design.",
      "video_mp4_url": null,
      "tags": [
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332784",
      "video_webm_url": null,
      "video_ogv_length": 148434573,
      "slug": "pycon-2010--keynote--cadence--quality-and-design",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-813.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010KeynoteCadenceQualityAndDesign660-721.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzUwC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 274,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        112
      ],
      "title": "Using Python to Create Robotic Simulations for Planetary Exploration (#159)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:53:58Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Using Python to Create Robotic Simulations for Planetary Exploration (#159)</p>\n<p>Presented by Dr. Jonathan M Cameron (Jet Propulsion Laboratory (NASA))</p>\n<p>\nThe primary activity of the Dartslab (http://dartslab.jpl.nasa.gov) at Jet Propulsion Laboratory (JPL) is to create simulations of robotic vehicles for planetary exploration. We have created simulations of a wide variety of robotic vehicles such as spacecraft, rovers, and airships. We have been using Python in a variety of ways to build our simulations. In this talk we will outline how we use Python to set up a runtime environment for our simulations and to tie together computationally intense C++ code modules at runtime. We will also discuss how we have been using Python to help prototype and design C++ code. \n</p>",
      "video_mp4_url": null,
      "tags": [
        283,
        231,
        322,
        383,
        384
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332780",
      "video_webm_url": null,
      "video_ogv_length": 158409536,
      "slug": "pycon-2010--using-python-to-create-robotic-simula",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-124.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010UsingPythonToCreateRoboticSimulationsForPlaneta894-385.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4VigczNSAI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 275,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        113
      ],
      "title": "Powerful Pythonic Patterns (#186)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:52:03Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Powerful Pythonic Patterns video</p>\n<p>Presented by Alex Martelli</p>\n<p>\nAn extremely misguided meme is going around: that Python doesn't have, or need, any Design Patterns. Maybe the meme springs from not realizing what the Gang Of Four state so plainly in their historical \"Design Patterns\" book: which design patterns are useful DOES depend on the programming language one targets -- design is NOT independent of implementation, as the epic-fail \"Waterfall\" Methodology Pattern would suggest. If you examine a \"classic DP\" that's basically a workaround for some other language's lack of garbage collection, or for a clumsy static-typing system, it may indeed be worthless for Python. But many other DPs are still perfectly useful and applicable, and indeed Python's strengths as a language afford riffing on them to develop highly Pythonic, powerful, productive variants.\n</p>\n<p> \nIn this talk, I analyze some of my favorite pattern families -- e.g., Template Method and its variants, Dependency Injection and its ilk, Callback and friends -- in a highly Pythonic context. Non-pattern Idioms, and Patterns that aren't really Design Patterns but rather Architecture or Methodology ones, also make cameo appearances.\n</p>",
      "video_mp4_url": null,
      "tags": [
        243,
        231,
        322,
        254
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332767",
      "video_webm_url": null,
      "video_ogv_length": null,
      "slug": "pycon-2010--powerful-pythonic-patterns---186",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-201.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010PowerfulPythonicPatterns186111-668.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4VigczNOwI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 276,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        114
      ],
      "title": "The Mighty Dictionary (#55)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:51:55Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "The Mighty Dictionary\n<br /><br />\nPresented by Brandon Craig Rhodes\n<br /><br />\nBoth newcomers and experienced developers alike love Python's built-in data types \u00e2\u20ac\u201d especially dictionaries! But how do dictionaries work? What do they do better than other container types, and where, on the other hand, are their weaknesses? Using simple, vivid diagrams that show the secrets of how the dictionary is implemented, and a series of progressively interesting examples of its behavior, we will train the Python developer's mind to picture what the dictionary is doing in just enough detail to make good decisions, as your data sets get larger, about when to use dictionaries and when other data structures might be more appropriate.",
      "video_mp4_url": null,
      "tags": [
        385,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332763",
      "video_webm_url": null,
      "video_ogv_length": null,
      "slug": "pycon-2010--the-mighty-dictionary---55",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-930.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010TheMightyDictionary55184-989.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzTcC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 277,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        115,
        116
      ],
      "title": "VisTrails: A Python-Based Scientific Workflow and Provenance System (#172)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:51:11Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>VisTrails: A Python-Based Scientific Workflow and Provenance System</p>\n<p>Presented by David Koop (University of Utah and VisTrails, Inc.)</p>\n<p>\nIn this talk, we will give an overview of VisTrails (<a href=\"http://www.vistrails.org/\">http://www.vistrails.org</a>), a python-based open-source scientific workflow that transparently captures provenance (i.e., lineage) of both data products and the processes used to derive these products. We will show how VisTrails can be used to streamline data exploration and visualization. Using real examples, we will demonstrate key features of the system, including the ability to visually create information processing pipelines that combine multiple tools and Iibraries such as VTK, pylab, and matplotlib. We will also show how VisTrails leverages provenance information not only to support result reproducibility, but also to simplify the creation and refinement of pipelines.\n</p>",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        386,
        387
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332762",
      "video_webm_url": null,
      "video_ogv_length": 159842063,
      "slug": "pycon-2010--vistrails--a-python-based-scientific-",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-716.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010VisTrailsAPythonBasedScientificWorkflowAndProven325-746.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4VigczNNgI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 278,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        117
      ],
      "title": "How does Enthought distribute packages? (#108)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:50:18Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "How does Enthought distribute packages?\n<br /><br />\nPresented by Dr. Ilan Schnell\n<br /><br />\nThis presentation gives an overview of how packages are build and\ndistributed for different operating systems in the Enthought Python\nDistribution. Enstaller (http://pypi.python.org/pypi/Enstaller/4.0.0)\nis a tool I wrote for installing egg-based packages, which are not\nnecessarily Python packages, such as SWIG or HDF5. I will discuss\nthe architecture of Enstaller, and in particular the egg-based distribution\nformat. \n<br /><br />\n[VIDEO HAS ISSUES: Frezz frame in the start of the video]",
      "video_mp4_url": null,
      "tags": [
        388,
        389,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332759",
      "video_webm_url": null,
      "video_ogv_length": 165694547,
      "slug": "pycon-2010--how-does-enthought-distribute-package",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-737.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010HowDoesEnthoughtDistributePackages108674-826.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzTMC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 279,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        118
      ],
      "title": "How Are Large Applications Embedding Python? (#6)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:50:07Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>How Are Large Applications Embedding Python?</p>\n<p>Presented by Peter Shinners</p>\n<p>\nAn examination of the ways Python is being embedded and deployed in the large applications used for computer graphics; like Renderman, Maya, Houdini, and Nuke.\n</p>\n<p> \nThis session is for those interested in the popular techniques of embedding the Python interpreter. The survey will determine the best practices for embedding Python at the core of a large application.\n</p>",
      "video_mp4_url": null,
      "tags": [
        143,
        390,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332756",
      "video_webm_url": null,
      "video_ogv_length": 150904861,
      "slug": "pycon-2010--how-are-large-applications-embedding-",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-694.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010HowAreLargeApplicationsEmbeddingPython6975-926.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4VigczNMAI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 280,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        77
      ],
      "title": "Python 3: The Next Generation (#48)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:49:19Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Python 3: The Next Generation\n<br /><br />\nPresented by Wesley J. Chun\n<br /><br />\nThis talk is about the evolution of Python. We will discuss Python 2 and Python 3: what the compatibility issues are, what the main differences are, and also talk about migration, Python 2.6, and other transition tools.",
      "video_mp4_url": null,
      "tags": [
        391,
        231,
        322,
        392
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332751",
      "video_webm_url": null,
      "video_ogv_length": 150617866,
      "slug": "pycon-2010--python-3--the-next-generation---48",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-246.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010Python3TheNextGeneration48189-803.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzSsC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 281,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        119
      ],
      "title": "The Zen of CherryPy (#111)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:48:48Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "The Zen of CherryPy\n<br /><br />\nPresented by Robert E Brewer\n<br /><br />\nCherryPy will be 8 years old in June 2010! This presentation will look at the \"Zen of CherryPy\": a set of 10 design guidelines which CherryPy has developed over those years, explaining why they're useful, why some are uniquely Python, and how to apply them in your own projects.",
      "video_mp4_url": null,
      "tags": [
        393,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332744",
      "video_webm_url": null,
      "video_ogv_length": 168261538,
      "slug": "pycon-2010--the-zen-of-cherrypy---111",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-564.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010TheZenOfCherryPy111227-275.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzSQC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 282,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        120
      ],
      "title": "Python for Large Astronomical Data Reduction and Analysis Systems (#107)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:48:22Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Python for Large Astronomical Data Reduction and Analysis Systems</p>\n<p>Presented by Francesco Pierfederici (Harvard-Smithsonian Center for Astrophysics)</p>\n<p>\nWe describe how Python is used in a large astronomy project to automatically process data from several telescopes in both the hemispheres. We introduce the general problem and discuss challenges and lessons learned.\n</p>",
      "video_mp4_url": null,
      "tags": [
        394,
        56,
        255,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332739",
      "video_webm_url": null,
      "video_ogv_length": 140468272,
      "slug": "pycon-2010--python-for-large-astronomical-data-re",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-335.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010PythonForLargeAstronomicalDataReductionAndAnaly443-396.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4VigczNHwI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 283,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        121
      ],
      "title": "The state of Packaging (#63)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-11T16:47:21Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "The state of Packaging\n<br /><br />\nPresented by Tarek Ziad\u00e9\n<br /><br />\nThe Python Package Index (PyPI) became over the last years an essential tool to share your Python programs. As long as you use Distutils standards, you can register and upload your work at PyPI in a few seconds.\n<br /><br /> \nProjects like Setuptools and Pip added great features on the top of this : the ability to fetch PyPI to install a project and its dependencies. So you can \"easy_install A-Program\" and everything is done automatically for you.\n<br /><br />\nBut all these features have shown the flaws and limitations of the current Distutils design, and the urgency to make it evolve with respect to the existing OS-specific packaging systems.\n <br /><br />\nThis talk will detail the biggest issues that need to be solved, and the work that is being done. It will end up with a presentation of the Distutils roadmap, and an overview of the Distribute project, the Setuptools replacer. ",
      "video_mp4_url": null,
      "tags": [
        395,
        396,
        397,
        152,
        94,
        231,
        322,
        398,
        399
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3332733",
      "video_webm_url": null,
      "video_ogv_length": 213007664,
      "slug": "pycon-2010--the-state-of-packaging---63",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-602.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010TheStateOfPackaging63241-136.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHMzRkC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 284,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        96
      ],
      "title": "Introduction to Twisted",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-09T15:57:56Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Introduction to Twisted</p>\n<p>Presented by Chander Ganesan</p>\n<p>\nInterested in faster networking with Python? Twisted is an event-driven networking engine written in Python that allows developers to quickly and easily develop and deploy network services.\n</p>\n<p>\nIn this tutorial, attendees will learn what twisted is, why to use it, how it works, and how to install, develop, and deploy simple clients and servers using Twisted.\n</p>\n<p>\nAttendees should bring a laptop if possible, to try out code examples in class.\n</p>\n<p>\nIntended Audience\n</p>\n<p>\nIntermediate Python Programmers with an understanding of Pythons object oriented syntax (classes, inheritance, etc.)\n</p>\n<p>\nClass Outline\n</p>\n<ul>\n<li>Introduction to Twisted (15 min) - Basic Concepts\n<ul>\n<li>Event-Driven model, cooperative multi-tasking\n</li></ul>\n</li><li>Installing Twisted & Verifying Installation (10 min)\n</li><li>Starting the Event loop (10 min)\n</li><li>Timed Events (10 min)\n</li><li>Understanding Twisted Factories & their use (15 min)\n</li><li>Understanding Protocol Objects & their use (15 min)\n</li><li>Creating a simple Twisted Client (25 min)\n<ul>\n<li>Using twisted.internet.reactor.connectTCP()\n</li><li>Creating a Client Factory\n</li><li>Creating a Protocol\n</li></ul>\n</li><li>Creating a simple Twisted Server (Server Factory) (25 min)\n<ul>\n<li>Using twisted.internet.reactor.listenTCP()\n</li><li>Creating a Server Factory\n</li></ul>\n</li><li>Using Twisted SMTP to Send Mail (15 min)\n</li><li>Twisted Web Basics (25 min)\n</li><li>Introduction to the twist Daemonizer & tac files (15 min)\n</li></ul>\n<p>\nRequirements\n</p>\n<ul>\n<li>An understanding of Object Oriented Python (OOP concepts, inheritance, classes, etc.)\n</li><li>Attendees wishing to try the examples should have Python 2.4 or newer and Twisted pre-installed.\n</li><li>Attendees wishing to try the examples should have Python 2.4 or newer and Twisted pre-downloaded (we'll go over installation)\n</li><li>Twisted may be downloaded at <a href=\"http://www.twistedmatrix.com\">http://www.twistedmatrix.com/</a>\n</li><li>Windows users will require the Win32 extensions for Python as well <a href=\"http://starship.python.net/crew/mhammond/win32/Downloads.html\">http://starship.python.net/crew/mhammond/win32/Downloads.html</a>\n</li></ul>",
      "video_mp4_url": null,
      "tags": [
        400,
        231,
        234,
        195
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3322332",
      "video_webm_url": null,
      "video_ogv_length": 1005028048,
      "slug": "pycon-2010--introduction-to-twisted",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-185.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010IntroductionToTwisted616-750.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigcv7fAI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 285,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        122
      ],
      "title": "To relate or not to relate, that is the question (#99)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-09T15:56:20Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "To relate or not to relate, that is the question\n<br /><br />\nPresented by Mark Ramm\n<br /><br />\nThere is a lot of buzz about Couch, Casandra, MongoDB, and other non relational databases, and at the same time there are decades of hard work that's gone into optimizing databases built around the relational model. This talk will focus on comparing relational DB's to their new friends in practice, and on providing practical tools for deciding what's right for your project.",
      "video_mp4_url": null,
      "tags": [
        46,
        57,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3322333",
      "video_webm_url": null,
      "video_ogv_length": 167116682,
      "slug": "pycon-2010--to-relate-or-not-to-relate--that-is-t",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-522.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010ToRelateOrNotToRelateThatIsTheQuestion99229.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHL%2B30C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 286,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        123,
        327
      ],
      "title": "Hacking the Social Web with Python",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-09T15:52:35Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Open Stack: Hacking the Social Web</p>\n<p>Presented by David Recordon/Mike Malone</p>\n<p>\nIn this tutorial we'll explain what the Open Stack is and how you can use tools like OAuth, OpenID, and Portable Contacts to integrate your app with the rest of the web. We'll cover each component in depth, and walk through example Python implementations for a variety of scenarios.\n</p>\n<p>\nIntended Audience\n</p>\n<ul>\n<li>Beginning to intermediate Python programmers interested in Web Development\n</li><li>Python programmers who provide or consumer web service APIs\n</li></ul>\n<p>\nClass Outline\n</p>\n<ul>\n<li>Intro: what is the \"Open Stack\"\n</li><li>Working with HTTP in Python\n</li><li>Working with responses: JSON, XML, Atom, RSS, HTML\n</li><li>Decentralized identity with OpenID\n<ul>\n<li>Implementing a Provider in Python\n</li><li>Implementing a Relying Party in Python\n</li></ul>\n</li><li>Delegated authorization with OAuth\n<ul>\n<li>Implementing a Provider in Python\n</li><li>Implementing a Consumer in Python\n</li></ul>\n</li><li>Exchanging contacts with Portable Contacts\n</li><li>Aggregating activity with Activity Streams\n</li><li>Discovering how to communicate: LRDD + XRD\n</li><li>Making markup structured: microformats\n</li><li>The future of the Open Stack\n</li><li>Learn more & get involved: resources and communities\n</li><li>Q&A;\n</li></ul>\n<p>\nRequirements\n</p>\n<p>\nSome experience doing web development or working with web service APIs\n</p>",
      "video_mp4_url": null,
      "tags": [
        401,
        402,
        403,
        404,
        41,
        231,
        322,
        405,
        234,
        353
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3322318",
      "video_webm_url": null,
      "video_ogv_length": 923087859,
      "slug": "pycon-2010--hacking-the-social-web-with-python",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-144.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010HackingTheSocialWebWithPython694-349.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigcv7bgI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 287,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        98
      ],
      "title": "Python 101",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-09T15:51:03Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Python 101</p>\n<p>Presented by Stuart Williams</p>\n<p>\nThis half-day tutorial presents the basics of Python to beginning and intermediate programmers. It pairs well with ''Python 102'' which follows a similar outline but goes much deeper.\n</p>\n<p>\nRather than starting with \"Hello, world!\", we use the interactive Python interpreter shell to get hands-on familiarity with much of core Python before covering blocks and scripts.\n</p>\n<p>\nThe tutorial is divided into short sections, each with presentation and hands-on exercises, to quickly cover lots of ground.\n</p>\n<p>\nAdvanced topics are introduced throughout and covered in \"extra credit\" exercises such that more advanced participants can learn at their own pace.\n</p>\n<p>\nIntended Audience\n</p>\n<p>\nProgrammers with experience in other languages who want a fast hands-on introduction to Python. Content will target both Python 3.1 and 2.6.\n</p>\n<p>\nRequirements\n</p>\n<p>\nBring a laptop computer with Python 2.6 or 3.1 installed. Try to get as much of an overview of Python before the tutorial as you have time to in order to get more out of the tutorial. Two angles on this are the Python Quick Reference and the Python website's tutorial.\n</p>\n<p>\nClass Outline\n</p>\n<ul>\n<li>Numbers and operators\n</li><li>Strings - immutability, operators, methods, functions, and formatting\n</li><li>Introspection/Discovery\n</li><li>Tuples and Lists\n</li><li>List Comprehensions\n</li><li>Objects and Names\n</li><li>Dictionaries\n</li><li>Loops and Blocks\n</li><li>Iterables\n</li><li>Generator Expressions\n</li><li>Functions\n</li><li>Generators\n</li><li>Namespaces\n</li><li>Simple Classes\n</li><li>Exceptions\n</li></ul>\n<p>\n</p><p>\nThe handouts at <a href=\"http://swilliams.ca/python-tutorials\">http://swilliams.ca/python-tutorials</a>. If you're interested in the software I wrote to deliver the talk drop me a line. My address is in the handouts.\n</p>",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        258,
        234
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3322312",
      "video_webm_url": null,
      "video_ogv_length": 732203665,
      "slug": "pycon-2010--python-101",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-895.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010Python101314.png",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigcv7aAI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 288,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        124
      ],
      "title": "wxPython II: Introduction to GUI Programming and MVC",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-09T15:49:22Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>wxPython II: Introduction to GUI Programming and MVC</p>\n<p>Presented by David Goodger</p>\n<p>\nwxPython is an open-source graphical user interface (GUI) toolkit that runs on multiple platforms, including Linux, Windows, and Mac OS X. By the end of this tutorial, attendees will understand the concepts behind the Model-View-Controller (MVC) design pattern and will have built a complex wxPython application.\n</p>\n<p>\nIntended Audience\n</p>\n<p>\nPython programmers (of any level; familiarity with Python is assumed) with some wxPython experience. Attending the \"wxPython I\" tutorial is recommended.\n</p>\n<p>\nRequirements\n</p>\n<p>\nAttendees are welcome to bring a laptop loaded with Python 2.4+ and wxPython 2.6+ to follow along, but this is not required.\n</p>",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        234,
        378
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3322300",
      "video_webm_url": null,
      "video_ogv_length": 889329578,
      "slug": "pycon-2010--wxpython-ii--introduction-to-gui-prog",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-727.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010wxPythonIIIntroductionToGUIProgrammingAndMVC717.png",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigcv7XAI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 289,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        125
      ],
      "title": "Mastering Python 3 I/O",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-09T15:46:35Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Mastering Python 3 I/O\n<br /><br />\nPresented by David Beazley\n<br /><br />\nAs most Python programmers know, Python 3 breaks backwards compatibility with Python 2 in a number of significant ways. Although guides to Python 3 tend to focus on superficial incompatibilities such as the new print function, changes to exception handling, or new language features, the most substantial changes concern the strict separation of Unicode and bytes as well as the new I/O stack. Not only do these changes have far-reaching effects throughout the standard library, but changes to I/O are likely to be the most major source of problems for anyone porting an existing Python application to Python 3. In this tutorial, we're going to take a top-to-bottom tour of the entire Python 3 I/O system. We'll focus on how to properly handle both text and binary data, changes to standard library modules, examine advanced features such as the buffer API, perform some performance experiments, and end with practical advice for programmers working on porting applications from Python 2 to 3.\nIntended Audience\n<br /><br />\nIntermediate to advanced Python programmers who are either developing new applications or contemplating a migration to Python 3. Attendees should already be familiar with the basics of Python programming including standard datatypes and commonly used library modules. A background in systems programming topics such as file handling, subprocesses, and socket programming is also recommended.\nClass Outline\n<ul>\n<li>Introducing Python 3 (with a focus on I/O)\n</li><li>Text Processing\n</li><li>Binary Data Handling\n</li><li>Dealing with System Interfaces and External Programs\n</li><li>The New io library\n</li><li>Network programming\n</li><li>The revised buffer API and direct I/O\n</li><li>Porting from Python 2 to 3.\n</li></ul>\n",
      "video_mp4_url": null,
      "tags": [
        406,
        231,
        322,
        392,
        234
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3322291",
      "video_webm_url": null,
      "video_ogv_length": 411662419,
      "slug": "pycon-2010--mastering-python-3-i-o",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010MasteringPython3IO592.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010MasteringPython3IO499.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHL%2B1MC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 290,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        26
      ],
      "title": "Keynote: Building the Python Community",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-09T15:46:18Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Keynote: Building the Python Community\n<br /><br />\nPresented by Steve Holden\n<br /><br />\nSteve addresses the Python community, thanks helpers for PyCon 2010, and talks about the PSF and where it's at.",
      "video_mp4_url": null,
      "tags": [
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3322284",
      "video_webm_url": null,
      "video_ogv_length": 70625813,
      "slug": "pycon-2010--keynote--building-the-python-communit",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-830.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010KeynoteBuildingThePythonCommunity114.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHL%2B0wC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 291,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        25
      ],
      "title": "Django in Depth",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-09T15:45:59Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Django In Depth</p>\n<p>Presented by James Bennett</p>\n<p>\nMost books, tutorials and other documentation for Django take a high-level approach to its components and APIs, and so barely scratch the surface of the framework. In this tutorial, however, we'll take a detailed look under the hood, covering everything from the guts of the ORM to the innards of the template system to how the admin interface really works.\n</p>\n<p>\nWhether you're the newest of newbies or the most seasoned of application developers, you'll come away with a deeper knowledge of Django, and a plethora of new tips and tricks you can use in your own applications.\n</p>\n<p>\nIntended Audience\n</p>\n<p>\nBeginning to intermediate users of the Django web framework.\n</p>\n<p>\nClass Outline\n</p>\n<ul>\n<li>Introduction: going beyond Django's documentation\n</li><li>Under the hood of the ORM\n</li><li>Forms and validation\n</li><li>Inside the template system\n</li><li>How Django processes requests\n</li><li>Understanding the view layer\n</li><li>The admin interface, inside and out\n</li><li>Q&A;\n</li></ul>\n<p>[VIDEO HAS ISSUES: Cam frezz from time to time]</p>",
      "video_mp4_url": null,
      "tags": [
        407,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3322277",
      "video_webm_url": null,
      "video_ogv_length": null,
      "slug": "pycon-2010--django-in-depth",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-162.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010DjangoInDepth285-671.jpg",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigcv7RQI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 292,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [],
      "title": "Plenary: Intro to sprints",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-09T15:45:56Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Plenary: Intro to Sprinting and Intro to Sprints",
      "video_mp4_url": null,
      "tags": [
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3322279",
      "video_webm_url": null,
      "video_ogv_length": 119998242,
      "slug": "pycon-2010--plenary--intro-to-sprints",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010PlenaryIntroToSprints957.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010PlenaryIntroToSprints957-795.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHL%2B0cC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 293,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [],
      "title": "Faster Python Programs Through Optimization",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-09T15:42:40Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>\nFaster Python Programs Through Optimization\n</p>\n<p>\nMike M\u00c3\u00bcller\n</p>\n<p>\nAlthough Python programs may be slow for certain types of tasks, there are\nmany different ways to improve performance. This tutorial will introduce\noptimization strategies and demonstrate techniques to implement them.\nAnother of the objectives of this course is to give participants the ability\nto decide what might be the optimal solution for a certain performance problem. Participants are strongly recommended to bring laptops because all techniques\nare introduced with examples and exercises.\n</p>\n<p>\nIntended Audience\n</p>\n<p>\nPython programmers with intermediate knowledge.\n</p>\n<p>\nClass Outline\n</p>\n<ul>\n<li>How Fast is Fast Enough?\n</li><li>Optimization Guidelines\n<ul>\n<li>Premature optimization\n</li><li>Optimization rules\n</li><li>Seven steps for incremental optimization\n</li></ul>\n</li><li>Optimization strategy\n<ul>\n<li>Measuring in stones\n</li><li>Profiling CPU usage\n</li><li>Profiling memory usage\n</li></ul>\n</li><li>Algorithms and Anti-patterns\n<ul>\n<li>String Concatenation\n</li><li>List and Generator Comprehensions\n</li><li>The Right Data Structure\n</li><li>Caching\n</li></ul>\n</li><li>The Example\n</li><li>Testing Speed\n</li><li>Pure Python\n</li><li>Meet Psyco, the JIT\n</li><li>Numpy for Numeric Arrays\n</li><li>Using multiple CPUs with pyprocessing/multiprocessing\n</li><li>Combination of optimization strategies\n</li><li>Results of Different Example Implementations\n</li></ul>\n<p>\nThe following third-party packages are needed:\n</p>\n<ul>\n<li>psyco (version 1.5.2 or higher)\n</li><li>numpy (version 1.2 or higher)\n</li><li>pyprocessing (2.5 or lower only)\n</li><li>Guppy_PE framework\n</li></ul>",
      "video_mp4_url": null,
      "tags": [
        53,
        231,
        322,
        234
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3322261",
      "video_webm_url": null,
      "video_ogv_length": 1158385595,
      "slug": "pycon-2010--faster-python-programs-through-optimi",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-797.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010FasterPythonProgramsThroughOptimization658.png",
      "embed": "<embed src=\"http://blip.tv/play/g4Vigcv7NQI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"390\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 294,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        126
      ],
      "title": "Pycon 2010: Analysis: The other kind of testing (#185)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-03-09T13:07:48Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Analysis: The other kind of testing\n<br /><br />\nPresented by Bob Ippolito\n<br /><br />\nSoftware testing helps verify that your code meets a specification, but not how to improve the specification. How can you stay competitive when most of the big names today are using analysis to guide product evolution? Level the playing field and make better products by learning how to design experiments, collect data, make measurements, and optimize your specifications.",
      "video_mp4_url": null,
      "tags": [
        408,
        231,
        322,
        21
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3321657",
      "video_webm_url": null,
      "video_ogv_length": 152495613,
      "slug": "pycon-2010--analysis--the-other-kind-of-testing--",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-468.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010AnalysisTheOtherKindOfTesting185103.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHL9lkC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 295,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        127
      ],
      "title": "Pay only for what you eat: A tour of the Repoze.BFG repository and philosophy (#174)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T15:28:52Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Pay only for what you eat: A tour of the Repoze.BFG repository and philosophy\n<br /><br />\nPresented by Carlos de la Guardia\n<br /><br />\nBFG is a Python web application framework based on WSGI. It is a \"pay only for what you eat\" framework. Meaning that you can get started easily and learn new concepts as you go, and only if you need them. It's simple, well tested, well documented, and fast. It also tries to make development fun.\n<br /><br /> \nThis talk will introduce the framework and its philosophy, including similarities and differences with other frameworks. I will then show some of the software available in its repository and discuss the inclusive, loose connection approach that the BFG community prefers for creating a flexible web development platform.",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        267,
        225
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3263959",
      "video_webm_url": null,
      "video_ogv_length": null,
      "slug": "pycon-2010--pay-only-for-what-you-eat--a-tour-of-",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-180.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010PayOnlyForWhatYouEatATourOfTheRepozeBFGRepo556.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHItBwC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 296,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        128
      ],
      "title": "New *and* Improved: Coming changes to unittest, the standard library test framework (#52)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T15:18:48Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "New *and* Improved: Coming changes to unittest, the standard library test framework\n<br /><br />\nPresented by Michael J Foord\n<br /><br />\nIn Python 2.7 and 3.2 a whole bunch of improvements to unittest will arrive. unittest is the Python standard library testing framework and for several years it has languished whilst other Python testing frameworks have innovated. Some of the best innovations have made their way into unittest which has had quite a renovation.\n <br /><br />\nThis talk will go through the major changes, like the new assert methods, test discovery and the load_tests protocol, and also explain how they can be used with earlier versions of Python.",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        325
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3263882",
      "video_webm_url": null,
      "video_ogv_length": 152143505,
      "slug": "pycon-2010--new--and--improved--coming-changes-to",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-686.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010NewAndImprovedComingChangesToUnittestTheStanda472-63.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHIs08C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 297,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        129
      ],
      "title": "Pynie: Python 3 on Parrot (#148)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T14:56:00Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Pyine: Python 3 on Parrot\n<br /><br />\nPresented by Allison Randal\n<br /><br />\nPynie is an implementation of Python 3 on Parrot. The goal of Pynie is to duplicate the pure-Python behavior of CPython 3.x, and perhaps eventually a C API compatibility layer. Parrot provides a set of compiler tools and core functionality common to many dynamic languages, so the core code of Pynie is lightweight. Pynie allows Python 3 libraries to be shared between multiple languages. This talk is an overview of the features Pynie currently supports and the work left to be done, together with an introduction to the internals of Pynie.",
      "video_mp4_url": null,
      "tags": [
        409,
        231,
        322,
        410,
        392
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3263792",
      "video_webm_url": null,
      "video_ogv_length": 92686713,
      "slug": "pycon-2010--pynie--python-3-on-parrot---148",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-253.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010PyniePython3OnParrot148332.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIsnUC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 298,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [],
      "title": "Panel: Form Generator Generators (#28)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T14:42:25Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Panel: Form Generator Generators\n<br /><br />\nChristopher Perkins; Brandon Craig Rhodes (Rhodes Mill Studios, Inc.); Chris P McDonough (Agendaless Consulting); Jacob Kaplan-Moss (jacob@jacobian.org); Jonathan Ellis\n<br /><br />\nIt seems that almost every python web framework in existence has solved the problem of automatically generating forms. Some have straight forward techniques, some are unique or even an unusual approach to the problem. The question is: \"what can we learn from each other?\". This panel will examine the different ways developers generate forms by offering examples, and summarizing the functionality, differences, and similarities between these valuable web development tools.\n<br /><br />\n[VIDEO HAS ISSUES: Feedback galore when moving between mics, cover your ears]",
      "video_mp4_url": null,
      "tags": [
        138,
        411,
        231,
        322,
        412,
        230,
        92,
        287,
        217
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3263735",
      "video_webm_url": null,
      "video_ogv_length": 213163287,
      "slug": "pycon-2010--panel--form-generator-generators---28",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010PanelFormGeneratorGenerators20164.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010PanelFormGeneratorGenerators20300.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIsjwC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 299,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        130
      ],
      "title": "Optimal Resource Allocation using Python (#36)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T14:10:55Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Optimal Resource Allocation using Python\n<br /><br />\nPresented by Ryan J O'Neil\n<br /><br />\nA brief introduction to modeling and solving resource allocation and scheduling problems using Python and SCIP.\n<br /><br />\nAt times a programmer is faced with difficult, possibly NP-Hard, optimization problems such as scheduling or assignment. Sophisticated techniques exist for modeling and solving these sorts of problems which are well implemented in optimization solvers. This talk introduces some of these techniques using the ZIB Optimization Suite and its new Python interface.\n<br /><br />\n[VIDEO HAS ISSUES: Audio buzzing]",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        413
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3263574",
      "video_webm_url": null,
      "video_ogv_length": 127002678,
      "slug": "pycon-2010--optimal-resource-allocation-using-pyt",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010OptimalResourceAllocationUsingPython36659.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010OptimalResourceAllocationUsingPython36659-324.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHIsRsC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 300,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        131
      ],
      "title": "Dude, Where's My Database? (#133)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T13:52:55Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Dude, Where's My Database?\n<br /><br />\nPresented by Eric Florenzano (Django)\n<br /><br />\nThere are so many great open source databases out on the market right now--\nwe're really in the golden age of databases. Fortunately, Python can talk to\nvirtually all of them. With so many databases at our disposal, how do we\nchoose which one to use for our particular use case?\n <br /><br />\nThis talk will go over the many different classes of databases, introduce some\nof the particular implementations for each class of database, and describe the\nstrengths and weaknesses of each. By weighing the pros and cons of each type\nof database, the speaker hopes to dispel the many rumors and misconceptions\nthat people have about what's out there today.\n<br /><br />\n[VIDEO HAS ISSUES: Audio cuts out at about 20 seconds in, then gets out of sync until around 3:10.]",
      "video_mp4_url": null,
      "tags": [
        272,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3263488",
      "video_webm_url": null,
      "video_ogv_length": 188382147,
      "slug": "pycon-2010--dude--where--39-s-my-database----133",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010DudeWheresMyDatabase133973.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010DudeWheresMyDatabase133159.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIsEUC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 301,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        132
      ],
      "title": "Creating RESTful Web services with restish (#17)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T04:21:04Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Creating RESTful Web Services with restish\n<br /><br />\nPresented by Grig Gheorghiu\n<br /><br />\nRoy Fielding described REST in his Ph.D. dissertation in the year 2000. Almost ten years later, Web developers are still confused as to how to apply the REST principles in their applications. Examples of poorly designed 'REST' APIs abound, and I will make use of them in my talk.\n<br /><br /> \nIn this presentation, I will give an overview of REST and its design principles, and I will show a concrete example of a RESTful Web service implemented in the restish framework. My examples will include CRUD operations, as well as transactions. I will also show how to consume this Web service using both httplib2 and curl. I would be remiss if I didn't describe ways to test the Web service with WebTest and twill.",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        30,
        412,
        21,
        92
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261470",
      "video_webm_url": null,
      "video_ogv_length": 506397358,
      "slug": "pycon-2010--creating-restful-web-services-with-re",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-846.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010CreatingRESTfulWebServicesWithRestish17893.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIoGMC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 302,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        133
      ],
      "title": "Python Metaprogramming (#64)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T03:30:47Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Python Metaprogramming\n<br /><br />\nPresented by Nicolas Lara\n<br /><br />\nPython makes a great metaprogramming languages. Metaprogramming is great for solving problems faster, in a more generic way and providing rich APIs. This talk explores the different options provided in python to do metaprogramming and the right way to use them.",
      "video_mp4_url": null,
      "tags": [
        414,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261354",
      "video_webm_url": null,
      "video_ogv_length": 179252019,
      "slug": "pycon-2010--python-metaprogramming---64",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-669.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010PythonMetaprogramming64641.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIn28C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 303,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        116,
        134
      ],
      "title": "Evolving Your Framework Under Fire (#150)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T03:27:39Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Evolving your framework under fire\n<br /><br />\nPresented by Tres Seaver (Agendaless Consulting, Inc.)\n<br /><br />\nWriting frameworks is fun, which is why we have so many of them in the Python web development world. Making your shiny new framework stand up under the load of a demanding application can be painful, but can lead to substantial improvements.",
      "video_mp4_url": null,
      "tags": [
        415,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261349",
      "video_webm_url": null,
      "video_ogv_length": 139828651,
      "slug": "pycon-2010--evolving-your-framework-under-fire---",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-866.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010EvolvingYourFrameworkUnderFire150602.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIn2oC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 304,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [],
      "title": "Designing to Scale: The Story of ShootQ (#5)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T03:25:59Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Designing to Scale: The story of ShootQ\n<br /><br />\nJonathan LaCour (ShootQ)\n<br /><br />\nShootQ is a web-based studio management solution for professional photography studios, designed to automate and simplify the task of running a small business. In this talk, Jonathan LaCour, the CTO of ShootQ, hopes to share his experience designing a web application that can scale up to meet the demands of a rapidly growing customer base. The talk will cover a variety of topics including TurboGears 2.0, WSGI, horizontal and vertical scaling, database replication, load balancing, deployment, and more.",
      "video_mp4_url": null,
      "tags": [
        29,
        416,
        231,
        322,
        417,
        16,
        230,
        225
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261344",
      "video_webm_url": null,
      "video_ogv_length": 244896099,
      "slug": "pycon-2010--designing-to-scale--the-story-of-shoo",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-509.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010DesigningToScaleTheStoryOfShootQ5229.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIn2UC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 305,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        136,
        135
      ],
      "title": "Python in quantitative finance (#158)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T03:25:01Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Python in quantitative finance\n<br /><br />\nPresented by Wes McKinney (AQR Capital Management, LLC)\n<br /><br />\nThis talk will show how Python and libraries such as NumPy were\ninstrumental at AQR for building a robust research platform for\nprototyping and implementing quantitative trading models. We will\ndiscuss many different tools, including pandas, a new open source\nlibrary designed for analyzing common financial and economic data\nsets.\n<br /><br />\nA variety of examples will be presented to explore Python's\ncurrent status as a replacement for other statistical computing\nenvironments (as compared with R, MATLAB, or other commercial and\nopen-source statistical products).",
      "video_mp4_url": null,
      "tags": [
        418,
        419,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261331",
      "video_webm_url": null,
      "video_ogv_length": 223064549,
      "slug": "pycon-2010--python-in-quantitative-finance---158",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-816.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010PythonInQuantitativeFinance158145.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIn1gC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 306,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        294
      ],
      "title": "Easy command-line applications with cmd and cmd2 (#153)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T03:24:36Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Easy command-line applications with cmd and cmd2\n<br /><br />\nPresented by Catherine Devlin (IntelliTech Systems)\n<br /><br />\nThe Python Standard Library's cmd module makes it absurdly simple to write command-line interpreters - non-graphical programs that communicate with users interactively through a simple text interface. The third-party cmd2 module adds high-powered \"batteries\" to applications written for cmd.\n<br /><br /> \nThis presentation teaches attendees how to easily make their own powerful command-line interpreters with cmd and cmd2. It also describes the tricks cmd2 uses for some of its more interesting functionality so that they can implement them in their own programs (even unrelated ones). It ends with a brief demonstration of sqlpython, a cmd2-based application that improves on existing ad-hoc SQL applications. ",
      "video_mp4_url": null,
      "tags": [
        420,
        421,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261338",
      "video_webm_url": null,
      "video_ogv_length": 162264357,
      "slug": "pycon-2010--easy-command-line-applications-with-c",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-122.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010EasyCommandlineApplicationsWithCmdAndCmd2153294.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIn18C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 307,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        138
      ],
      "title": "Mastering Team Play: Four powerful examples of composing Python tools (#184)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T03:06:07Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Mastering Team Play: Four powerful examples of composing Python tools\n<br /><br />\nPresented by Raymond Hettinger\n<br /><br />\nStarts with a quick review of the performance characteristics of major individual tools in Python: bisect, heapq, lists, deques, sets, frozensets, class structures, sorts, and weakreferences. Show how these tools can be powerfully combined to create elegant solutions to four hard problems.\n<ol>\n<li>Random sampling: when one data structure isn't enough. Discuss how the nature of the problem dictates when to use one of two alternate data structures.\n</li><li>Ordered dictionaries: with the right compostion of dictionaries, linked lists, and weak references, a dictionary can remember its insertion order without any impact on its big-Oh running times.\n</li><li>NFA to DFA conversion. The classic, but difficult, algorithm for lexical analysis becomes simple when composing Python's dicts and frozensets.\n</li><li>Running median: the obvious approaches are horribly slow. The problem centers around how to efficiently maintain sorted data while advancing a large sliding window one value at a time. A list of deques provides a dramatic and scalable improvement in running time. \n</li></ol>",
      "video_mp4_url": null,
      "tags": [
        422,
        423,
        424,
        425,
        426,
        231,
        322,
        427,
        428,
        429
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261295",
      "video_webm_url": null,
      "video_ogv_length": 492820610,
      "slug": "pycon-2010--mastering-team-play--four-powerful-ex",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010MasteringTeamPlayFourPowerfulExamplesOfComposin748.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010MasteringTeamPlayFourPowerfulExamplesOfComposin150.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHInzQC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 308,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        139
      ],
      "title": "Diversity as a Dependency (#49)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T03:03:58Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Diversity as a Dependency\n<br /><br />\nPresented by Anna M Ravenscroft (PSF)\n<br /><br />\nThe PSF recently adopted a diversity statement. While some argue that we should do this just because it's \"the right thing to do\", others question why we, as a technical community, should even worry about diversity. This talk addresses the diversity question, not in moralistic or ethical terms, but in pragmatic ones. Studies on creativity and productivity demonstrate the potential benefits of diversity for the Python community. Making Python the best language it can be is not merely helped by increasing diversity, but may be dependent on diversity.",
      "video_mp4_url": null,
      "tags": [
        176,
        11,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261290",
      "video_webm_url": null,
      "video_ogv_length": 581917204,
      "slug": "pycon-2010--diversity-as-a-dependency---49",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010DiversityAsADependency49360.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010DiversityAsADependency49113.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIny8C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 309,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [],
      "title": "Plenary: Saturday Evening Lightning Talks",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T03:00:04Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "<p>Saturday Evening Lightning Talks</p>\n<p>(00:00) Jacob Kaplan-Moss - Introduction</p>\n<p>(00:30) Guido van Rossum - PSF community service awards</p>\n<p>(02:42) Ka-Ping Yee - Using scrape.py to test your web apps</p>\n<p>(07:35) Ayman Hourieh - Python debugging techniques</p>\n<p>(12:28) Robin Mills - Geo-tagging and Phatch</p>\n<p>(17:30) Allen Short - Big brother's design rules</p>\n<p>(21:25) David Goodger - PyCon swag</p>\n<p>(25:00) David Ewing - Python in tiny embedded systems for the\nSmart Grid and beyond</p>\n<p>(30:15) Dmitry Jemerov - Introducing PyCharm</p>\n<p>(33:50) Dirkjan Ochtman - PEP 385: hg conversion</p>\n<p>(37:30) Jesse Noller - Python: Hell Yeah.</p>",
      "video_mp4_url": null,
      "tags": [
        31,
        390,
        326,
        430,
        431,
        432,
        433,
        231,
        322,
        434
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261277",
      "video_webm_url": null,
      "video_ogv_length": 217373194,
      "slug": "pycon-2010--plenary--saturday-evening-lightning-t",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-370.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010PlenarySautrdayEveningLightningTalks793.png",
      "embed": "<embed src=\"http://blip.tv/play/g4VigcifIgI%2Em4v\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 310,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        140
      ],
      "title": "Tests and Testability (#188)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T02:57:34Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Tests and Testability\n<br /><br />\nPresented by Ned Batchelder\n<br /><br />\nTesting software is difficult. Large complex systems don't lend themselves naturally to automated testing. This isn't just because they are large, it's because developers often don't consider how testable their code is. Testability is as important as all the other -ilities in your code (portability, maintainability, efficiency, etc).\n <br /><br />\nTestability is a characteristic of your code that makes it easier to test. Increased testability can give you better tests, but it also gives you just plain better code. Improving testability generally means considering the interfaces to your internal modules and improving them to provide better modularity. This improvement often has benefits in your product code.\n<br /><br /> \nI'll discuss specific examples to demonstrate how code can be made more testable. Mocks, dependency injection, and crisp API design are just a few of the techniques that can improve your code's testability and make you a happier person.",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        21
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261272",
      "video_webm_url": null,
      "video_ogv_length": 163421188,
      "slug": "pycon-2010--tests-and-testability---188",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-184.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010TestsAndTestability188726.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHInx0C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 311,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        141,
        142
      ],
      "title": "How to write cross-interpreter Python programs (#101)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T02:50:52Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "How to write cross-interpreter Python programs\n<br /><br />\nPresented by Maciej Fijalkowski (merlinux GmbH, pypy)\n<br /><br />\nThis talk will cover basics about writing cross-interpreter\npython programs. What to do and most of all what not to do.\nThis will help you if you want at some point in time to\nrun program on for example Java platform or faster python\ninterpreter, but also if you want to keep it running between\nCPython releases.",
      "video_mp4_url": null,
      "tags": [
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261260",
      "video_webm_url": null,
      "video_ogv_length": 89924085,
      "slug": "pycon-2010--how-to-write-cross-interpreter-python",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010HowToWriteCrossinterpreterPythonPrograms101146.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010HowToWriteCrossinterpreterPythonPrograms101432.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHInxEC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 312,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        143
      ],
      "title": "Pycon 2010: 508 and You: Taking the Pain out of Accessibility (#119)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T02:46:16Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "508 and You: Taking the Pain out of Accessibility\n<br /><br />\nPresented by Katie A Cunningham (NASA/Indyne)  \n<br /><br />\nThinking about scoring a government contract, but haven't heard of 508 compliance yet? Interested in making your site accessible to people with disabilities? Never thought about compliance, but want to know why it's a good idea?",
      "video_mp4_url": null,
      "tags": [
        435,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261238",
      "video_webm_url": null,
      "video_ogv_length": 187217226,
      "slug": "pycon-2010--508-and-you--taking-the-pain-out-of-a",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-289.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010508AndYouTakingThePainOutOfAccessibility119246.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHInnsC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 313,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        144
      ],
      "title": "What every developer should know about database scalability (#21)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T02:37:22Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "What every developer should know about database scalability\n<br /><br />\nPresented by Jonathan Ellis\n<br /><br />\nCaching, replication, partitioning, and distributed databases: how these can (and can't!) help you scale your data.",
      "video_mp4_url": null,
      "tags": [
        123,
        436,
        437,
        231,
        322,
        417,
        16
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261223",
      "video_webm_url": null,
      "video_ogv_length": 374371005,
      "slug": "pycon-2010--what-every-developer-should-know-abou",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-359.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010WhatEveryDeveloperShouldKnowAboutDatabaseScalab945.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHInmwC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 314,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [],
      "title": "Debating 'til Dawn: Topics to keep you up all night (#183)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T02:33:48Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Debating 'til Dawn: Topics to keep you up all night\n<br /><br />\nMike C. Fletcher (VRPlumber Consulting Inc.)\n<br /><br />\nPyCon is about staying up all night hacking. When you're tired, you don't sleep, you debate ideas with your sprint-mates! This presentation will attempt to condense the best of the last few years of PyGTA into a 30-minute jumping off point full of wild assertions, unreasonable assumptions, and just plain wrong-headed ideas to kick-start those heated discussions that just keep going long into the night. What are your programming mantras? What million-dollar ideas do you have to improve Python? Should there be programmer liability? Is there art in programming and should there be? Are you a cowboy coder or an straight-laced engineer? Is PyCon really about staying up all night discussing ideas? We'll have a feedback channel to share your thoughts, we'll keep it moving, and we'll see if we can't make this the most sleepless PyCon yet.",
      "video_mp4_url": null,
      "tags": [
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261216",
      "video_webm_url": null,
      "video_ogv_length": 96732258,
      "slug": "pycon-2010--debating---39-til-dawn--topics-to-kee",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-169.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010DebatingTilDawnTopicsToKeepYouUpAllNight183772.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHInmUC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 315,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [],
      "title": "Learning Hosting Best-Practices From WebFaction (#57)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T02:27:32Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Learning Hosting Best-Practices From WebFaction\n<br /><br />\nBrandon Craig Rhodes (Rhodes Mill Studios, Inc.)\n<br /><br />\nThe rise of WebFaction has been dramatic in the world of Python-friendly hosting services. What are the secrets to getting the most out of their features? From the point of view of a customer with no other affiliation with WebFaction \u00e2\u20ac\u201d as a customer advising other customers \u00e2\u20ac\u201d this talk offers lessons learned in using WebFaction to host everything from lone static content to multiple Python web applications and services co-existing together. WebFaction uses some unique techniques to support both user-local *and* application-local Python packages. Should you use their special installation techniques, or install and use virtualenv on your own initiative? Learn the trade-offs, and learn how *not* to get yourself in trouble while running ``easy_install`` on WebFaction, my favorite hosting service.\n<br /><br />\n[VIDEO HAS ISSUES: Audio slightly clipping]",
      "video_mp4_url": null,
      "tags": [
        134,
        231,
        322,
        438
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261193",
      "video_webm_url": null,
      "video_ogv_length": 299133138,
      "slug": "pycon-2010--learning-hosting-best-practices-from-",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010LearningHostingBestPracticesFromWebFaction57394.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010LearningHostingBestPracticesFromWebFaction57693.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHInk4C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 316,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [],
      "title": "Unladen Swallow: fewer coconuts, faster Python (#73)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T02:22:07Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Unladen Swallow: fewer coconuts, faster Python\n<br /><br />\nCollin Winter (Google / Unladen Swallow)\n<br /><br />\nUnladen Swallow is a Google-sponsored optimization branch of CPython. This talk will cover Google's motivation for Unladen Swallow, the approach being taken, results so far, challenges faced, cancers cured and plans for merger with CPython.",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        373
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261170",
      "video_webm_url": null,
      "video_ogv_length": 248772776,
      "slug": "pycon-2010--unladen-swallow--fewer-coconuts--fast",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010UnladenSwallowFewerCoconutsFasterPython73518.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010UnladenSwallowFewerCoconutsFasterPython73140.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHInjcC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 317,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [],
      "title": "Advanced String Formatting (#117)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T02:20:15Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Advanced String Formatting\n<br /><br />\nEric Smith (True Blade Systems, Inc.)\n<br /><br />\nAdvanced string formatting (str.format, described in PEP 3101) was added in Python 2.6 and 3.0 as a more powerful, flexible, and extensible alternative to the existing %-based string formatting.\n<br /><br /> \nThis talk will discuss how to use str.format, how your own types can benefit from it, its strengths and weaknesses, how to migrate to it, and advanced topics such as implementing your own templating language.",
      "video_mp4_url": null,
      "tags": [
        439,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261172",
      "video_webm_url": null,
      "video_ogv_length": 132322346,
      "slug": "pycon-2010--advanced-string-formatting---117",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010AdvancedStringFormatting117411.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010AdvancedStringFormatting117208.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHInjkC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 318,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [],
      "title": "How and why Python is being used to by the Military to model real-world battlefield scenarios (#13)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T02:04:34Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "How and why Python is being used by the Military to model real-world battlefield scenarios\n<br /><br />\nMr. Eric Silverman (ALATEC Inc. / US Army)\n<br /><br />\nLeveraging the power of Python, military analyst and software developers out at White Sands Missile Range in New Mexico have converted a closed-form model, which was developed for scripted Cold War scenarios, into a more sophisticated and adaptive system. COMBATXXI is a premium wargaming model, which now is poised to answer questions that have a direct effect on military operations currently in theater, in large part because of Python.\n<br /><br />\n[VIDEO HAS ISSUES: High pitched noise on audio]",
      "video_mp4_url": null,
      "tags": [
        56,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261123",
      "video_webm_url": null,
      "video_ogv_length": 118955955,
      "slug": "pycon-2010--how-and-why-python-is-being-used-to-b",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010HowAndWhyPythonIsBeingUsedToByTheMilitaryTo608.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010HowAndWhyPythonIsBeingUsedToByTheMilitaryTo898.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHInggC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 319,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        145
      ],
      "title": "IronPython Tooling (#67)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T02:00:29Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "IronPython Tooling\n<br /><br />\nPresented by Dino E Viehland (Microsoft)\n<br /><br />\nOne of the most popular requests for the IronPython team is tooling support. During this talk I\u00e2\u20ac\u2122ll show you some of the existing tools available to help create IronPython applications. I\u00e2\u20ac\u2122ll also look at the latest IronPython features which can help you debug, profile and improve your applications. I\u00e2\u20ac\u2122ll also compare and contrast these with the solutions available for CPython that you may already be familiar with.",
      "video_mp4_url": null,
      "tags": [
        300,
        231,
        322,
        440
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3261111",
      "video_webm_url": null,
      "video_ogv_length": 86436947,
      "slug": "pycon-2010--ironpython-tooling---67",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010IronPythonTooling67405.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010IronPythonTooling67763.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHInXwC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 320,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        146
      ],
      "title": "What We've Learned From Building Basie (#85)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-24T01:20:31Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "What We've Learned from Building Basie\n<br /><br />\nPresented by Dr. Greg Wilson (University of Toronto)\n<br /><br />\nSince September 2008, teams of undergraduates from half a dozen different universities have been building a Django-based replacement for Trac called Basie. This talk will present what they've accomplished and discuss what we've learned about getting junior developers who are juggling half a dozen projects at once to build production-quality code.",
      "video_mp4_url": null,
      "tags": [
        441,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3260995",
      "video_webm_url": null,
      "video_ogv_length": 203537616,
      "slug": "pycon-2010--what-we--39-ve-learned-from-building-",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-260.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010WhatWeveLearnedFromBuildingBasie85770-118.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHInQgC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 321,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        147
      ],
      "title": "The Ring of Python (#189)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T19:25:43Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "The Ring of Python\n<br /><br />\nPresented by holger krekel (merlinux gmbh)\n<br /><br />\nCPython 2.5/2.6/3.1, Jython, IronPython, PyPy, StacklessPython, UnladenSwallow, Cython ... what do we make of all these cool interpreter projects and versions? Where does competition help and where does it hamper?\n <br /><br />\nIn this interactive talk I'll highlight the main strengths of each of the Python interpreters. Furthermore, I'll discuss ways to leverage Python interpreters in a co-operative way, discuss challenges, projects and issues ahead and also briefly highlight 'execnet', one my own projects for bridging (Any) Python to (Any) Python. This is also the first time i am going to try out a new and funvisual presentation technique after several years of having done mostly text-based ones",
      "video_mp4_url": null,
      "tags": [
        18,
        369,
        300,
        9,
        231,
        322,
        91,
        211,
        373
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259840",
      "video_webm_url": null,
      "video_ogv_length": 327612140,
      "slug": "pycon-2010--the-ring-of-python---189",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-102.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010TheRingOfPython189914.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIlAUC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 322,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        148
      ],
      "title": "Optimizations And Micro-Optimizations In CPython (#38)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T19:21:54Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Optimizations and Micro-Optimizations in CPython\n<br /><br />\nPresented by Mr. Larry Hastings\n<br /><br />\nCPython mostly gets faster from one version to the next. And when CPython gets faster, your programs get faster. This talk is a survey of optimizations made to CPython, recent and historical, large and small. Audience doesn't need to be familiar with CPython internals, but should be familiar with Python and conversant in C.\n<br /><br />\n[VIDEO HAS ISSUES: Audio interference]",
      "video_mp4_url": null,
      "tags": [
        18,
        53,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259830",
      "video_webm_url": null,
      "video_ogv_length": 125038120,
      "slug": "pycon-2010--optimizations-and-micro-optimizations",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010OptimizationsAndMicroOptimizationsInCPython38821.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010OptimizationsAndMicroOptimizationsInCPython38668.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIk3sC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 323,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        149
      ],
      "title": "Think Globally, Hack Locally - Teaching Python in Your Community (#122)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T19:15:42Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Think Globally, Hack Locally - Teaching Python in Your Community\n<br /><br />\nPresented by Leigh Honeywell (HackLab.TO)\n<br /><br />\nFor over a year, HackLabTO (<a href=\"http://hacklab.to/\">http://hacklab.to</a>), a hackerspace in Toronto, has been the home of an informal Python class / hack night every Thursday evening. Our participants represent a diverse cross-section of the lab's community, and include everyone from complete beginners who hadn't written code since BASIC in high school, to seasoned veterans. Come hear about our successes and failures, and learn how to start such an event in your local community.",
      "video_mp4_url": null,
      "tags": [
        176,
        231,
        322,
        288
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259810",
      "video_webm_url": null,
      "video_ogv_length": 165040205,
      "slug": "pycon-2010--think-globally--hack-locally---teachi",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-105.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010ThinkGloballyHackLocallyTeachingPythonInYourC847.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIk2cC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 324,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        150
      ],
      "title": "Small acts make great revolutions: crafting Python and Open Source communities in Rio de Janeiro (#78)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T19:14:48Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Small acts make great revolutions: crafting Python and Open Source communities in Rio de Janeiro\n<br /><br />\nPresented by Guilherme Chapiewski; Henrique Bastos\n<br /><br />\nEven though we are Python lovers, we at PythOnRio (Python's Rio de Janeiro users group) strongly believe in differences. Programming languages and technologies are not religions. Why do we have to compete against each other when we can take advantage of diversity by sharing our knowledge and learning to use the best tools for each job? By promoting this thinking we are gathering people from many different open source communities.\n<br /><br />\nThat's our main recipe for the success of initiatives like Coding Dojo Rio, PythOnCampus, Dev in Rio, #horaextra and many other social meetings where we have gathered some of the smartest people in Rio's software development community.\n <br /><br />\nWith this philosophy, Rio de Janeiro communities are growing and starting to jell - they are becoming so strongly knit that the whole is greater than the sum of the parts.\n <br /><br />\nIn this talk, we would like to share not only our \"methods\" and \"formulas\", but the values and experiences that are leading us to build a strong and active community while having lots of fun.",
      "video_mp4_url": null,
      "tags": [
        176,
        231,
        322,
        442
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259805",
      "video_webm_url": null,
      "video_ogv_length": 143686099,
      "slug": "pycon-2010--small-acts-make-great-revolutions--cr",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-801.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010SmallActsMakeGreatRevolutionsCraftingPythonAnd957.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIk2IC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 325,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        44
      ],
      "title": "Turtles All The Way Down: Demystifying Deferreds, Decorators, and Declarations (#169)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T19:11:41Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Turtles all the way down: Demystifying deferreds, decorators and declarations\n<br /><br />\nPresented by Glyph Lefkowitz\n<br /><br />\nPython's flexible object model allows library and framework authors to add very flexible declarations. Metaclasses, decorators, callable objects, and operator overloading practically allow libraries to re-define the language in order to provide a more concise, natural style for that library. Unfortunately, the library user's first experience of such conveniences is often confusing, because it's not clear what's going on.\n <br /><br />\nIn this talk, I will try to convince you that all of this wonderful magic isn't all that weird. This is not a typical how-to session on how to use a particular feature, either of Python or of Twisted, but will rather draw examples from Python, Twisted, and Zope to illustrate techniques you can use to read and understand \"magical\" Python code.",
      "video_mp4_url": null,
      "tags": [
        340,
        290,
        443,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259798",
      "video_webm_url": null,
      "video_ogv_length": 190591580,
      "slug": "pycon-2010--turtles-all-the-way-down--demystifyin",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-850.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010TurtlesAllTheWayDownDemystifyingDeferredsDecora171.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIk1sC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 326,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        190
      ],
      "title": "Why not run all your tests all the time? A study of continuous integration systems (#160)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T19:11:16Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Why not run all your tests at all the time?  A study of continuous integration systems\n<br /><br />\nPresented by Dr. C. Titus Brown (Michigan State University)\n<br /><br />\nThere are an increasing number of continuous integration (CI) systems\navailable for use by Pythonistas, but no clear guide to how to choose\na CI system for your project. I will examine the architecture choices\nmade by buildbot, bitten, Hudson, continuum, CruiseControl, DART, and\npony-build, and discuss the configuration and customization of several\nof these systems for Pythonic needs, as well as give short demos (for\nbuildbot, bitten, Hudson, and pony-build). ",
      "video_mp4_url": null,
      "tags": [
        444,
        445,
        70,
        446,
        447,
        448,
        449,
        231,
        322,
        21
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259794",
      "video_webm_url": null,
      "video_ogv_length": 167026723,
      "slug": "pycon-2010--why-not-run-all-your-tests-all-the-ti",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-107.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010WhyNotRunAllYourTestsAllTheTimeAStudyOfCon964.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIk1cC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 327,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        152
      ],
      "title": "Deconstruction of an Object (#62)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T19:06:30Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Deconstruction of an Object\n<br /><br />\nPresented by Jeff Rush (Tau Productions Inc.)\n<br /><br />\nAn incremental deconstruction of a class definition identifying the key elements\nsuch as layered namespaces, common attributes, lifecycle and access controls.\nWe'll also look at calling into, out of and through an object, making classes\nextensible and various object behaviors like containment, sequence, iteration\nand arithmetic. ",
      "video_mp4_url": null,
      "tags": [
        450,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259777",
      "video_webm_url": null,
      "video_ogv_length": 293909973,
      "slug": "pycon-2010--deconstruction-of-an-object---62",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-554.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010DeconstructionOfAnObject62593.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIk0YC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 328,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        153
      ],
      "title": "An Underwater Python: Tortuga the Python Powered Robot (#175)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T18:58:55Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "An Underwater Python: Tortuga the Python Powered Robot\n<br /><br />\nPresented by Joseph Lisee (Robotics @ Maryland)\n<br /><br />\nLearn about Tortuga, the python powered Autonomous Underwater Vehicle (AUV) developed by Robotics @ Maryland (<a href=\"http://ram.umd.edu\">http://ram.umd.edu</a>). See how python provides a flexible and efficient way to build the software that commands, simulates and controls Tortuga. Also learn about the trials, tribulations, and glory experienced developing, competing, losing, and winning with Tortuga in AUVSI AUV Competition (<a href=\"http://www.auvsi.org/competitions/water.cfm\">http://www.auvsi.org/competitions/water.cfm</a>).",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        451
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259744",
      "video_webm_url": null,
      "video_ogv_length": 212875988,
      "slug": "pycon-2010--an-underwater-python--tortuga-the-pyt",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010AnUnderwaterPythonTortugaThePythonPoweredRobot941.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010AnUnderwaterPythonTortugaThePythonPoweredRobot955.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIkyUC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 329,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        154
      ],
      "title": "Extending Java Applications with Jython (#65)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T18:54:14Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Extending Java Applications with Jython\n<br /><br />\nPresented by Frank J Wierzbicki (Jython)\n<br /><br />\nJython is an implementation of Python for the JVM. This talk covers the options available for integrating Jython and Java code, especially Java calling into Jython, since this is the trickier case. This talk will also cover some Java specific deployment options, such as deploying your Jython application as a jar file. Jar files allow you to package Java/Jython applications into a single archive. In many environments a user can click on a jar file to launch the contained application.",
      "video_mp4_url": null,
      "tags": [
        9,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259721",
      "video_webm_url": null,
      "video_ogv_length": 223855685,
      "slug": "pycon-2010--extending-java-applications-with-jyth",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-113.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010ExtendingJavaApplicationsWithJython65790.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIkw4C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 330,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        155
      ],
      "title": "Sprox: data driven web development (#137)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T18:52:18Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Sprox: data driven web development\n<br /><br />\nPresented by Jorge L Vargas\n<br /><br />\nSprox is a web frontend tool built to handle the creation and manipulation of data.\n<br /><br /> \nSprox is smart about your data. You should never write repetitive code again. Sane defaults and easy overwrites is what makes Sprox guess what you need for your fields.\n<br /><br /> \nThis talk will give an overview of Sprox, what it does and how to use it. Then we'll explore the available backends (SQLAlchemy, MongoDB) and dive into the tgext.admin package, which is the \"Admin Tool\" for the TurboGears2 framework.",
      "video_mp4_url": null,
      "tags": [
        381,
        231,
        322,
        452,
        253
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259714",
      "video_webm_url": null,
      "video_ogv_length": 196259593,
      "slug": "pycon-2010--sprox--data-driven-web-development---",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010SproxDataDrivenWebDevelopment137449.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010SproxDataDrivenWebDevelopment137727.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIkwcC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 331,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        156
      ],
      "title": "Internationalizing your Django project (#74)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T18:46:22Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Internationalizing your Django project\n<br /><br />\nPresented by Matt Croydon (Mediaphormedia)\n<br /><br />\nInternationalizing your Django application isn't as hard as it sounds. This session introduces the topic of internationalization and walks through what it takes to use Django's internationalization tools, including how to mark models, views, and templates for translation and how to enable internationalization in your application. We will also step through localizing your application in a new language.",
      "video_mp4_url": null,
      "tags": [
        453,
        454,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259691",
      "video_webm_url": null,
      "video_ogv_length": 186905210,
      "slug": "pycon-2010--internationalizing-your-django-projec",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-886.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010InternationalizingYourDjangoProject74399.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIknAC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 332,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        157
      ],
      "title": "Writing Books using Python and Open Source Software (#40)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T18:38:24Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Writing Books using Python and Open Source Software\n<br /><br />\nPresented by Mr. wesley j. chun\n<br /><br />\nThese days, there are countless number of software applications and web services that have been developed using free and open source software (FOSS). Such tools have become so flexible, powerful, and universal, that it should also be possible for authors to write manuscripts using open source tools like Python in the same way that applications are developed. In this talk, we present some case studies of this phenomenon.",
      "video_mp4_url": null,
      "tags": [
        74,
        231,
        322,
        440
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259663",
      "video_webm_url": null,
      "video_ogv_length": 188692385,
      "slug": "pycon-2010--writing-books-using-python-and-open-s",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-965.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010WritingBooksUsingPythonAndOpenSourceSoftware40530.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIklQC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 333,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        158
      ],
      "title": "Demystifying Non-Blocking and Asynchronous I/O (#164)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T18:37:45Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Demystifying non-blocking and asynchronous I/O\n<br /><br />\nPresented by Peter A Portante\n<br /><br />\nWe will first define what blocking, non-blocking, synchronous and\nasynchronous I/O are under the POSIX interfaces. We'll cover how and\nwhen these four types of I/O should be used, and their individual\neffects on a Python based application. The notion of concurrency will\nbe discussed by comparing a simple threaded blocking I/O application\nto a simple single threaded non-blocking I/O application by walking\nthe attendees through the python code for those applications. ",
      "video_mp4_url": null,
      "tags": [
        289,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259658",
      "video_webm_url": null,
      "video_ogv_length": 153455334,
      "slug": "pycon-2010--demystifying-non-blocking-and-asynchr",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-588.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010DemystifyingNonBlockingAndAsynchronousIO164681.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIkk8C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 334,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        141,
        142
      ],
      "title": "The speed of PyPy (#83)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T18:35:56Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "The Speed of PyPy\n<br /><br />\nPresented by Maciej Fijalkowski (merlinux GmbH, pypy)\n<br /><br />\nThe first part of the talk will cover PyPy's speed achievements resulting\nfrom the last year's work on the Just-In-Time Compiler. I'll present\nand discuss a number of benchmarks and compare against other Python-speed\nprojects. I'll also cover the basics of how the JIT works and what\nsort of programs it can greatly speedup (and which ones it can't).",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        91
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259650",
      "video_webm_url": null,
      "video_ogv_length": 138494172,
      "slug": "pycon-2010--the-speed-of-pypy---83",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-876.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010TheSpeedOfPyPy83496.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIkkcC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 335,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        160,
        159
      ],
      "title": "The Python and the Elephant: Large Scale Natural Language Processing with NLTK and Dumbo (#120)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T18:30:44Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "The Python and the Elephant: Large Scale Natural Language Processing with NLTK and Dumbo\n<br /><br />\nPresented by Nitin Madnani (University of Maryland, College Park); Dr. Jimmy J Lin (University of Maryland)\n<br /><br />\nA practical look at NLTK and Dumbo, python-powered and open-source toolkits and APIs for processing natural language on a large scale.\n<br /><br /> \nFor people like us who make a living trying to make a computer \"understand\" human language, Python is a very powerful language, given its rapid prototyping abilities, native unicode support and a stellar standard library. This relationship has been strengthened further by an open-source, python-based Natural Language ToolKit (<a href=\"http://www.nltk.org/\">www.nltk.org</a>) which is being widely used in the community for both teaching and \nresearch purposes and gaining traction in the general Python community as well (<a href=\"http://www.nltk.org/book\">www.nltk.org/book</a>). Recently, the Python community has seen the release of Dumbo (<a href=\"http://wiki.github.com/klbostee/dumbo\">http://wiki.github.com/klbostee/dumbo</a>), an open-source, python-based cloud-computing API (based on Hadoop) via the hands of Klaas Bosteels.\n <br /><br />\nIn this talk, we show how the amalgamation of Python, NLTK and Dumbo can allow for very large-scale natural language processing efficiently and elegantly.",
      "video_mp4_url": null,
      "tags": [
        455,
        456,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259632",
      "video_webm_url": null,
      "video_ogv_length": null,
      "slug": "pycon-2010--the-python-and-the-elephant--large-sc",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-296.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010ThePythonAndTheElephantLargeScaleNaturalLangua697.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIkjUC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 336,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        2,
        170
      ],
      "title": "Ecommerce in Python: Introduction to Satchmo and GetPaid (#146)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T18:30:32Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Ecommerce in Python: Introduction to Satchmo and GetPaid\n<br /><br />\nPresented by Christopher Johnson (ifPeople); Chris Moffitt (Satchmo)\n<br /><br />\nThe world of open source ecommerce is dominated by PHP-based solutions. However, in the past few years, there has been significant progress in building robust python-based alternatives. This discussion will cover 2 different python approaches. Satchmo is based on the Django framework and GetPaid is a framework for credit card processing in Plone. These solutions share a similar philosophy and approach but can be used in very different ways. This discussion will increase awareness of these applications, feature successful projects, explain how they can be used in your projects, and help you connect with the open source community.",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        4
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259633",
      "video_webm_url": null,
      "video_ogv_length": 438690455,
      "slug": "pycon-2010--ecommerce-in-python--introduction-to-",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010EcommerceInPythonIntroductionToSatchmoAndGetPai943.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010EcommerceInPythonIntroductionToSatchmoAndGetPai890.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIkjYC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 337,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        235
      ],
      "title": "How Python is guiding infrastructure construction in Africa (#84)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T18:27:34Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "How Python is guiding infrastructure construction in Africa\n<br /><br />\nPresented by Roy Hyunjin Han\n<br /><br />\nA whirlwind tour of the roles of different Python modules in the architecture of a geospatial infrastructure planning system.\n <br /><br />\nWe used Python to transform an elaborate, multistep process for finding and connecting households in villages into a single, streamlined planning experience. I'll explain how Python's freely available libraries empowered a small team of developers under a minimal budget and timeframe. Now just imagine if we had to do the same thing with Java.",
      "video_mp4_url": null,
      "tags": [
        457,
        56,
        458,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259616",
      "video_webm_url": null,
      "video_ogv_length": null,
      "slug": "pycon-2010--how-python-is-guiding-infrastructure-",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-628.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010HowPythonIsGuidingInfrastructureConstructionInA743.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIkiUC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 338,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        28
      ],
      "title": "Building Leafy Chat, DjangoDose, and Hurricane, Lessons Learned on the Real-Time Web with Python (#24)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T18:21:02Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Building Leafy Chat, DjangoDose, and Hurricane.  Lessons learned on the real-time web with Python\n<br /><br />\nPresented by Alex Gaynor (Eldarion)\n<br /><br />\nWebsites are getting increasingly dynamic and realtime in order to compete with desktop applications. This talk is an examination of 3 websites/tools I've built, all using Python. I'm going to try to explain what we did to build these, and how you can do the same. ",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        162,
        92
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259593",
      "video_webm_url": null,
      "video_ogv_length": 207063572,
      "slug": "pycon-2010--building-leafy-chat--djangodose--and-",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010BuildingLeafyChatDjangoDoseAndHurricaneLessonsL807.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010BuildingLeafyChatDjangoDoseAndHurricaneLessonsL504.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIkg4C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 339,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        164
      ],
      "title": "Simple WSGI composition: story of one refactoring (#51)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T18:20:55Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Simple WSGI composition: story of one refactoring\n<br /><br />\nPresented by Max Ischenko\n<br /><br />\nStory of a refactoring I did to split one big, monolithic Pylons app into a bunch of smaller ones, using power of WSGI and nginx. The devil is in the details: how to handle common auth, site-wide look and feel, common utilities, database management. Pros and cons of the approach, possible alternatives.\n<br /><br /> \nThe talk assumes listeners know what WSGI is and preferably have used some WSGI-centered framework like Pylons, Werkzeug, Paste or other.\n <br /><br />\nThe application this talk describes powers developers.org.ua.",
      "video_mp4_url": null,
      "tags": [
        459,
        231,
        322,
        229,
        225
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259574",
      "video_webm_url": null,
      "video_ogv_length": 145463857,
      "slug": "pycon-2010--simple-wsgi-composition--story-of-one",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010SimpleWSGICompositionStoryOfOneRefactoring51609.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010SimpleWSGICompositionStoryOfOneRefactoring51585.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIkXsC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 340,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        165
      ],
      "title": "Python in the Browser (#71)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T18:03:42Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Python in the Browser\n<br /><br />\nPresented by Jimmy Schementi\n<br /><br />\nYou write your server code in Python because you want to. You write your browser code in JavaScript because you have to. But with IronPython and Silverlight, you can write your browser code in Python and leave JavaScript behind. This talk provides an overview of Silverlight for Python developers, including out of browser applications as well as the new \u00e2\u20ac\u0153just text\u00e2\u20ac\u009d model where Python code is embedded directly in HTML pages. Even if you develop on Linux or Mac, you can still take advantage of Silverlight in the browser",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        460
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259502",
      "video_webm_url": null,
      "video_ogv_length": 177817021,
      "slug": "pycon-2010--python-in-the-browser---71",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010PythonInTheBrowser71653.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010PythonInTheBrowser71716.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIkTMC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 341,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        166
      ],
      "title": "Import this, that, and the other thing: custom importers (#9)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T18:03:30Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Import this, that, and the other thing.  Custom importers\n<br /><br />\nPresented by Brett Cannon\n<br /><br />\nSince Python 2.3, the ability has existed to customize the import process so that one can support code stored in alternative formats, e.g. zipimport and its support of importing code from a zip file. The aim of this talk is to make sure you understand how the custom import mechanism works and how to write your own custom importers using importlib from Python 3.1. ",
      "video_mp4_url": null,
      "tags": [
        461,
        462,
        463,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259501",
      "video_webm_url": null,
      "video_ogv_length": null,
      "slug": "pycon-2010--import-this--that--and-the-other-thin",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-883.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010ImportThisThatAndTheOtherThingCustomImporters824.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIkTIC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 342,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        167
      ],
      "title": "Distributed Programming with Pyro (#7)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T17:59:48Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Distributed Programming with Pyro\n<br /><br />\nPresented by Alfredo Deza\n<br /><br />\nCreate distributed code that communicates trivially over the network with objects that answer as if they were local.\n<br /><br /> \nSend, receive and manage data with this powerful library. Presentation will include real life example for restarting a load balanced web instance running two Apache web servers and a MySQL database.\n <br /><br />\nAlthough Python allows you to perform simple network operations, Pyro creates a nice layer between core networking essentials and your code, allowing you to concentrate more in developing your application. ",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        464
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259480",
      "video_webm_url": null,
      "video_ogv_length": null,
      "slug": "pycon-2010--distributed-programming-with-pyro---7",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-591.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010DistributedProgrammingWithPyro7718.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIkR0C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 343,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        168
      ],
      "title": "TurboGears Geospatial Framework (#19)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T17:58:04Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "TurboGears Geospatial Framework\n<br /><br />\nPresented by Sanjiv Singh\n<br /><br />\nIt is now possible to develop feature rich GIS web applications using TurboGears by harnessing the power of spatial databases using GeoAlchemy and integrating python GIS frameworks & utilities with TurboGears using tgext.geo",
      "video_mp4_url": null,
      "tags": [
        465,
        25,
        231,
        322,
        230
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3259471",
      "video_webm_url": null,
      "video_ogv_length": 126148363,
      "slug": "pycon-2010--turbogears-geospatial-framework---19",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010TurboGearsGeospatialFramework19882.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010TurboGearsGeospatialFramework19455.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIkRQC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 344,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        169
      ],
      "title": "Revisioned Databases for MultiUser Editing (#86)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T13:02:36Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Revisioned Databases for MultiUser Editing\n<br /><br />\nPresented by John Rittenhouse (CCP Games)\n<br /><br />\nAt CCP Games (www.ccpgames.com), we work on large MMO projects with tens of content editors editing the same data. To make this possible, we created a Revisioned Database framework that allows for us to create new multiuser editing systems without data synchronization between users having to be a major concern. In this talk, solutions we've tried are discussed, the basic layout of our revision database shown, the Python layer which handles it transparently for the programmer detailed, and how the Python layer is used in practice. All of this is focused on discussing what worked well and what pitfalls we ran into during development.",
      "video_mp4_url": null,
      "tags": [
        272,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3258101",
      "video_webm_url": null,
      "video_ogv_length": 401294147,
      "slug": "pycon-2010--revisioned-databases-for-multiuser-ed",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010RevisionedDatabasesForMultiUserEditing86828.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010RevisionedDatabasesForMultiUserEditing86189.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIhjsC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 345,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        25
      ],
      "title": "Managing the world's oldest Django project (#80)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T11:32:01Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Managing the world's oldest Django project\n<br /><br />\nPresented by James Bennett\n<br /><br />\nOr, \"how we cut 40,000 lines of code and learned to love unit testing.\"\n<br /><br /> \nThis talk will cover some of the development history behind Ellington,\nthe CMS which spawned the open-source Django web framework, and some\nof the issues involved in developing and maintaining a codebase of\nthis age and size. Highlights include branch management, the\nadvantages of open-sourcing non-critical functionality, the pain of\nporting and the joy that can only be found in a passing test suite.",
      "video_mp4_url": null,
      "tags": [
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3257645",
      "video_webm_url": null,
      "video_ogv_length": 303493475,
      "slug": "pycon-2010--managing-the-world--39-s-oldest-djang",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010ManagingTheWorldsOldestDjangoProject80325.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010ManagingTheWorldsOldestDjangoProject80830.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIgnYC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 346,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        170
      ],
      "title": "Supercharging Web Communications: Integrating Python-based Apps with Salesforce.com CRM (#152)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T11:08:25Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Supercharging Web Communications: Integrating Python-based Apps with Salesforce.com CRM\n<br /><br />\nPresented by Christopher Johnson\n<br /><br />\nSalesforce.com is a leading provider of Customer Relationship Management (CRM) for enterprises (over 55,000 customers) and nonprofits (over 6,000 customers). While it handles sales, marketing and support processes, it can be extended to automate any business process, making it a core part of business operations. Python developers working with companies using salesforce.com need to be able to integrate applications with Salesforce. Luckily, Salesforce.com has an elegant and powerful SOAP API. This presentation will introduce an example of using the Python wrapper for the Salesforce.com API (Beatbox) in an interactive website. While the library itself is powerful and can be used in custom Python applications, the Python community can also leverage the advanced integration between the Plone Content Management System (CMS) and salesforce.com. We will demonstrate how a Plone website can post forms, ecommerce transactions, and event RSVPs to salesforce. Additionally, we will show how developers can make Salesforce.com data interactive in a Plone website.",
      "video_mp4_url": null,
      "tags": [
        466,
        467,
        216,
        231,
        322,
        92
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3257508",
      "video_webm_url": null,
      "video_ogv_length": 234819947,
      "slug": "pycon-2010--supercharging-web-communications--int",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010SuperchargingWebCommunicationsIntegratingPythonbas971.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010SuperchargingWebCommunicationsIntegratingPythonbas271.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIgW4C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 347,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        171
      ],
      "title": "Interfaces, Adapters and Factories (#181)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T11:01:42Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Interfaces, Adapters, and Factories\n<br /><br />\nPresented by Jeff Rush\n<br /><br />\nA step-by-step introduction to the idea of object interfaces and adapters using incremental code examples, based on the zope.interface module. The case for adaption to ease code brittleness will be made and how we can reason about interfaces. I'll show how to automatically check code for conformance to your interfaces and then cover where objects come from, the several kinds of object factories in Python and how one kind can be based on interfaces.\n<br /><br />\n[VIDEO HAS ISSUES: Beginning out of focus]",
      "video_mp4_url": null,
      "tags": [
        468,
        469,
        231,
        322,
        470
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3257477",
      "video_webm_url": null,
      "video_ogv_length": 123411601,
      "slug": "pycon-2010--interfaces--adapters-and-factories---",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010InterfacesAdaptersAndFactories181657.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010InterfacesAdaptersAndFactories181339.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIgU8C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 348,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        172,
        174,
        173
      ],
      "title": "Seattle: A Python-based Platform for Easy Development and Deployment of Networked Systems and Applications (#162)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T10:35:10Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "A Python-based Platform for Easy Development and Deployment of Networked Systems and Applications\n<br /><br />\nPresented by Ivan Beschastnikh, Justin Samuel, and Justin Cappos\n<br /><br />\nSeattle is an open-source platform for developing and deploying networked\napplications. Core feature of Seattle is that it allows safe execution of untrusted code\non end-user systems. In our talk we look at how we used Python to build a safe,\nrestricted code execution environment for Seattle that not only provides\nexecution safety but also enforces strict resource consumption limits. In addition,\nSeattle includes a high-level API to hide inconsistent OS-specific behaviors\nfrom developers. What results is a platform that welcomes the participation of\nend-user machines for general-purpose distributed programming and creates new\npossibilities for developers.\n<br /><br />\n<a href=\"http://seattle.cs.washington.edu/\">http://seattle.cs.washington.edu/</a>\n<br /><br />\n[VIDEO HAS ISSUES: Beginning of talk missing, due to technical problems.]",
      "video_mp4_url": null,
      "tags": [
        69,
        471,
        472,
        260,
        473,
        231,
        322,
        474,
        83,
        475
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3257337",
      "video_webm_url": null,
      "video_ogv_length": 177494848,
      "slug": "pycon-2010--seattle--a-python-based-platform-for-",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-218.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010SeattleAPythonbasedPlatformForEasyDevelopmentAn600-243.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHIgEMC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 349,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        175
      ],
      "title": "Scaling your Python application on EC2 (#191)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T10:30:13Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Scaling Your Python Application on EC2\n<br /><br />\nPresented by Jeremy Edberg\n<br /><br />\nCome hear about the trials and tribulations of moving reddit's Python application from physical hardware to EC2's cloud infrastructure, and how they have scaled since moving. Will include general discussion of their learnings about scaling as well cloud specific issues.\n<br /><br />\n[VIDEO HAS ISSUES: Missing audio first few seconds]",
      "video_mp4_url": null,
      "tags": [
        231,
        322,
        476,
        16,
        92
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3257303",
      "video_webm_url": null,
      "video_ogv_length": 145496279,
      "slug": "pycon-2010--scaling-your-python-application-on-ec",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010ScalingYourPythonApplicationOnEC2191835.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010ScalingYourPythonApplicationOnEC2191887.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIgCIC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 350,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        176
      ],
      "title": "Decorators From Basics to Class Decorators to Decorator Libraries (#138)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T10:29:25Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Decorators from Basics to Class Decorators to Decorator Libraries\n<br /><br />\nPresented by Charles Merriam  \n<br /><br />\nDecorators simplify design and improve readability and reliability. This tutorial starts from the beginning with basic decorators, showing how simple tasks like restricting administration functions are clearer and more readable with decorators, and exactly how the decorators work. A simple library of decorators for tracing, logging, and caching results is presented. This leads into writing your own decorators and parameterized decorators either from scratch or by using libraries like Simionato's Decorator Decorator and \"@call_before(fn)\". Finally, using Python 3.x class decorators in place of metaclasses for most common dictionary modifications is covered.\n<br /><br />\n[VIDEO HAS ISSUES: Missing about 1 minute at start, because of technical problems.]",
      "video_mp4_url": null,
      "tags": [
        340,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3257278",
      "video_webm_url": null,
      "video_ogv_length": 152048091,
      "slug": "pycon-2010--decorators-from-basics-to-class-decor",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-192.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010DecoratorsFromBasicsToClassDecoratorsToDecorato979.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIgAkC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 351,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        177
      ],
      "title": "Python's Dusty Corners (#182)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-23T10:26:41Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Python's Dusty Corners\n<br /><br />\nPresented by Jack Diederich\n<br /><br />\nThe talk will be a brief overview of all the features in python that you don't need to know about right up until the moment you do. The list includes how comparisons work, descriptors, iterators, context managers, namespaces, else clauses on for/while loops (suggested by Hettinger). The narrative of the talk is that these are features that you don't need and/or shouldn't use in your day-to-day code but that you need to keep in the back of your mind because other people's code and the stdlib do use them. As Alex Martelli pointed out in his wonderful talk \"Abstractions as Leverage\" you can't successfully function at one level of abstraction if you don't know what is going on at the next level down. This talk is a whirlwind tour of the next level down.",
      "video_mp4_url": null,
      "tags": [
        477,
        478,
        479,
        344,
        321,
        231,
        322
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3257275",
      "video_webm_url": null,
      "video_ogv_length": 137194246,
      "slug": "pycon-2010--python--39-s-dusty-corners---182",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-259.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010PythonsDustyCorners182155.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHIgAYC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 352,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        88
      ],
      "title": "Actors: What, Why, and How (#161)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-22T23:45:38Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Actors: What, Why and How\n<br /><br />\nPresented by Donovan Preston\n<br /><br />\nSince the dawn of concurrency research, there have been two camps: shared everything, and shared nothing. Most modern applications use threads for concurrency, a shared everything architecture.\n<br /><br /> \nActors, however, use a shared nothing architecture where lightweight processes communicate with each other using message passing. Actors can change their state, create a new Actor, send a message to any Actor it has the Address of, and wait for a specific kind of message to arrive in it's mailbox.\n<br /><br /> \nWe will discuss the benefits of using the Actor architecture and strategies for implementing an Actor system in Python.\n<br /><br />\n<a href=\"http://bitbucket.org/fzzzy/python-actors/\">http://bitbucket.org/fzzzy/python-actors/</a>\n",
      "video_mp4_url": null,
      "tags": [
        255,
        332,
        458,
        231,
        322,
        30,
        16,
        225
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3255090",
      "video_webm_url": null,
      "video_ogv_length": 160241933,
      "slug": "pycon-2010--actors--what--why--and-how---161",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-306.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010ActorsWhatWhyAndHow161560.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHH7n0C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 353,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [
        125
      ],
      "title": "Understanding the Python GIL (#82)",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-22T20:21:36Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Understanding the Python GIL\n<br /><br />\nPresented by David Beazley\n<br /><br />\nThe Python Global Interpreter Lock (GIL) is a frequent source of debate and concern for programmers working with threads and concurrency. Although most Python programmers generally know that the GIL restricts Python's ability to utilize multiple CPUs, few know the inner details of how it actually works and how it impacts applications. This talk will dive into the inner workings of the GIL like you've never seen before. Topics include details about the execution of the Python interpreter, thread implementation, the GILs surprising behavior on multicore CPUs, and more.",
      "video_mp4_url": null,
      "tags": [
        255,
        480,
        231,
        322,
        367
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3254256",
      "video_webm_url": null,
      "video_ogv_length": 303360649,
      "slug": "pycon-2010--understanding-the-python-gil---82",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2010UnderstandingThePythonGIL82652.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2010UnderstandingThePythonGIL82660.png",
      "embed": "<embed src=\"http://blip.tv/play/AYHH6D4C\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  },
  {
    "pk": 354,
    "model": "videos.video",
    "fields": {
      "whiteboard": "",
      "category": 6,
      "speakers": [],
      "title": "Plenary: Friday Evening Lightning Talks",
      "quality_notes": "",
      "recorded": "2010-02-19",
      "state": 1,
      "updated": "2010-02-20T17:54:54Z",
      "added": "2012-02-23T04:20:00Z",
      "video_mp4_length": null,
      "description": "Plenary: Friday Evening Lightning Talks\n<br /><br />\n(00:00) Jacob Kaplan-Moss - lightning talk about lightning talks\n<br /><br />\n(03:50) Van Lindberg - What an Open Source Lawyer Actually Does\n<br /><br />\n(09:40) Greg Wilson - The Next Big Programming Book and How You Can Make it Happen (<a href=\"http://www.third-bit.com/\">http://www.third-bit.com/</a>)\n<br /><br />\n(14:25) Moshe Zadka - Don't Write Big Applications (more info <a href=\"http://moshez.wordpress.com/2010/02/17/dont-write-big-applications-a-lightning-talk/\">here</a>)\n<br /><br />\n(19:35) Ned Batchelder - What's new in coverage.py (<a href=\"http://nedbatchelder.com/\">http://nedbatchelder.com/</a>, <a href=\"http://nedbatchelder.com/code/coverage/\">coverage.py</a>)\n<br /><br />\n(25:10) Mike Maccana - Python Docx (<a href=\"http://github.com/mikemaccana/python-docx/\">http://github.com/mikemaccana/python-docx/</a>)\n<br /><br />\n(29:25) Trent Mick - ActiveState Code v3/Python Cookbook v3 (<a href=\"http://code.activestate.com/\">http://code.activestate.com/</a>)\n<br /><br />\n(34:40) Daniel Holth - Writing a SQLAlchemy Dialect\n<br /><br />\n(37:30) Dave Malcolm - Better Ways of Debugging the CPython Runtime\n<br /><br />\n(43:00) David Huggins-Daines - Recognizing Speech With Python (<a href=\"http://cmusphinx.sourceforge.net/\">http://cmusphinx.sourceforge.net/</a>)\n<br /><br />\n(48:00) Lucio Torre - Ubuntu One and Windows",
      "video_mp4_url": null,
      "tags": [
        481,
        482,
        483,
        116,
        18,
        484,
        485,
        486,
        231,
        322,
        487,
        253,
        488
      ],
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0",
      "source_url": "http://blip.tv/file/3245057",
      "video_webm_url": null,
      "video_ogv_length": 483744206,
      "slug": "pycon-2010--plenary--friday-evening-lightning-tal",
      "video_ogv_url": "http://blip.tv/file/get/Pycon-586.ogv",
      "video_webm_length": null,
      "summary": "",
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PlenaryFridayEveningLightningTalks330-562.jpg",
      "embed": "<embed src=\"http://blip.tv/play/AYHHoFIC\" type=\"application/x-shockwave-flash\" width=\"480\" height=\"350\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>"
    }
  }
]